%header SmcRecognizer.h

%class SmcRecognizer
%package SmcRecognizer

%start MainMap::Start
%map MainMap
%%

Default
{
	readNext() [ctxt.lastRead()!=1] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==0] nil {}
}

Start
{
	readNext() [ctxt.lastRead()=='f'] F {}
}

F
{
	readNext() [ctxt.lastRead()=='o'] O {}
}

O
{
	readNext() [ctxt.lastRead()=='r'] R {}
}

R
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space1 {}
}

Space1
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] nil {}
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && !ctxt.isNumber()] Variable {}
}

Variable
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n' && ctxt.isValidRead()] nil {}
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space2 {}
}

Space2
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] nil {}
	readNext() [ctxt.lastRead()=='i'] I {}
	readNext() [ctxt.lastRead()=='('] OpenBracket {}
}

I
{
	readNext() [ctxt.lastRead()=='n'] N {}
}

N
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space2 {}
}

OpenBracket
{
	readNext() [ctxt.isValidRead() && !ctxt.isNumber()] Word {setZeroWordsRead(false);}
	readNext() [ctxt.isNumber()] Digit {setZeroWordsRead(false);}
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space3 {}
	readNext() [ctxt.lastRead()==39] SingleQoute {}
	readNext() [ctxt.lastRead()==34] DoubleQoute {}
}

Digit
{
	readNext() [ctxt.isNumber()] nil {}
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

Word
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

SingleQoute
{
	readNext() [ctxt.lastRead()!=39 && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()=='\n'] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==39] AfterQoute {setZeroWordsRead(false);}
}

DoubleQoute
{
	readNext() [ctxt.lastRead()!=34 && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()=='\n'] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==34] AfterQoute {setZeroWordsRead(false);}
}

AfterQoute
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

Space3
{
	readNext() [ctxt.lastRead()==' ' || ctxt.lastRead()=='\t'] nil {}
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && ctxt.lastRead()!='\n' && !ctxt.isNumber()] Word {setZeroWordsRead(false);}
	readNext() [ctxt.isNumber()] Digit {setZeroWordsRead(false);}
	readNext() [ctxt.lastRead()==')' && !ctxt.getZeroWordsRead()] CloseBracket {}	
	readNext() [ctxt.lastRead()==39] SingleQoute {}
	readNext() [ctxt.lastRead()==34] DoubleQoute {}
}

CloseBracket
{
	readNext() Correct {correct();}
}

Correct
{
	readNext() [ctxt.lastRead()=='f'] F {}
}

Incorrect
{
	readNext() [ctxt.lastRead()=='f'] F {}
}
%%
