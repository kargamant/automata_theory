//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : automat.sm
//

#include "Translator.h"
#include "automat_sm.h"

using namespace statemap;

namespace Translator
{
    // Static class declarations.
    MainMap_F MainMap::F("MainMap::F", 0);
    MainMap_O MainMap::O("MainMap::O", 1);
    MainMap_R MainMap::R("MainMap::R", 2);
    MainMap_Space1 MainMap::Space1("MainMap::Space1", 3);
    MainMap_Variable MainMap::Variable("MainMap::Variable", 4);
    MainMap_Space2 MainMap::Space2("MainMap::Space2", 5);
    MainMap_I MainMap::I("MainMap::I", 6);
    MainMap_N MainMap::N("MainMap::N", 7);
    MainMap_OpenBracket MainMap::OpenBracket("MainMap::OpenBracket", 8);
    MainMap_Word MainMap::Word("MainMap::Word", 9);
    MainMap_Space3 MainMap::Space3("MainMap::Space3", 10);
    MainMap_CloseBracket MainMap::CloseBracket("MainMap::CloseBracket", 11);
    MainMap_Correct MainMap::Correct("MainMap::Correct", 12);
    MainMap_Incorrect MainMap::Incorrect("MainMap::Incorrect", 13);

    void TranslatorState::readNext(automatContext& context)
    {
        Default(context);
    }

    void TranslatorState::Default(automatContext& context)
    {
        throw (
            TransitionUndefinedException(
                (context.getState()).getName(),
                context.getTransition()));

    }

    void MainMap_Default::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()!=0)
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.incorrect();
                context.setState(MainMap::Incorrect);
            }
            catch (...)
            {
                context.setState(MainMap::Incorrect);
                throw;
            }
            context.getState().Entry(context);
        }
        else if (ctxt.lastRead()==0)
    
    {
            TranslatorState& endState = context.getState();

            context.clearState();
            try
            {
                ctxt.shutDown();
                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             TranslatorState::readNext(context);
        }


    }

    void MainMap_F::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='f')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::O);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_O::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='o')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::R);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_R::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='r')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Space1);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Space1::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()==' ')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Variable);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Variable::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n')
        {
            // No actions.
        }
        else if (ctxt.lastRead()==' ')
    
    {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Space2);
            context.getState().Entry(context);
        }        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Space2::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='i')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::I);
            context.getState().Entry(context);
        }
        else if (ctxt.lastRead()=='(')
    
    {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::OpenBracket);
            context.getState().Entry(context);
        }        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_I::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='n')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::N);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_N::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()==' ')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Space2);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_OpenBracket::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Word);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Word::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()!=' ' && ctxt.lastRead()!=')' && ctxt.lastRead()!='\n')
        {
            // No actions.
        }
        else if (ctxt.lastRead()==' ')
    
    {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Space3);
            context.getState().Entry(context);
        }
        else if (ctxt.lastRead()==')')
    
    {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::CloseBracket);
            context.getState().Entry(context);
        }        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Space3::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()!=' ' && ctxt.lastRead()!=')' && ctxt.lastRead()!='\n')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::Word);
            context.getState().Entry(context);
        }
        else if (ctxt.lastRead()==')')
    
    {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::CloseBracket);
            context.getState().Entry(context);
        }        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_CloseBracket::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.correct();
            context.setState(MainMap::Correct);
        }
        catch (...)
        {
            context.setState(MainMap::Correct);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Correct::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='f')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::O);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }

    void MainMap_Incorrect::readNext(automatContext& context)
    {
        Translator& ctxt = context.getOwner();

        if (ctxt.lastRead()=='f')
        {
            context.getState().Exit(context);
            // No actions.
            context.setState(MainMap::O);
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::readNext(context);
        }


    }
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
