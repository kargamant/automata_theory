%header Translator.h

%class Translator
%package Translator

%start MainMap::F
%map MainMap
%%

Default
{
	readNext() [ctxt.lastRead()!=0] Incorrect {incorrect();}
	readNext() [ctxt.lastRead()==0] nil {shutDown();}
}

F
{
	readNext() [ctxt.lastRead()=='f'] O {}
}

O
{
	readNext() [ctxt.lastRead()=='o'] R {}
}

R
{
	readNext() [ctxt.lastRead()=='r'] Space1 {}
}

Space1
{
	readNext() [ctxt.lastRead()==' '] nil {}
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && !ctxt.isNumber()] Variable {}
}

Variable
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n' && ctxt.isValidRead()] nil {}
	readNext() [ctxt.lastRead()==' '] Space2 {}
}

Space2
{
	readNext() [ctxt.lastRead()==' '] nil {}
	readNext() [ctxt.lastRead()=='i'] I {}
	readNext() [ctxt.lastRead()=='('] OpenBracket {}
}

I
{
	readNext() [ctxt.lastRead()=='n'] N {}
}

N
{
	readNext() [ctxt.lastRead()==' '] Space2 {}
}

OpenBracket
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n'] Word {}
}

Word
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!=')' && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()==' '] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

Space3
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!=')' && ctxt.lastRead()!='\n'] Word {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

CloseBracket
{
	readNext() Correct {correct();}
}

Correct
{
	readNext() [ctxt.lastRead()=='f'] O {}
}

Incorrect
{
	readNext() [ctxt.lastRead()=='f'] O {}
}
%%
