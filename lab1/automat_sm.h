//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : automat.sm
//

#ifndef AUTOMAT_SM_H
#define AUTOMAT_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace Translator
{
    // Forward declarations.
    class MainMap;
    class MainMap_F;
    class MainMap_O;
    class MainMap_R;
    class MainMap_Space;
    class MainMap_Word;
    class MainMap_I;
    class MainMap_N;
    class MainMap_OpenBracket;
    class MainMap_CloseBracket;
    class MainMap_Correct;
    class MainMap_Incorrect;
    class MainMap_Default;
    class TranslatorState;
    class automatContext;
    class Translator;

    class TranslatorState :
        public statemap::State
    {
    public:

        TranslatorState(const char * const name, const int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(automatContext&) {};
        virtual void Exit(automatContext&) {};

        virtual void readNext(automatContext& context);

    protected:

        virtual void Default(automatContext& context);
    };

    class MainMap
    {
    public:

        static MainMap_F F;
        static MainMap_O O;
        static MainMap_R R;
        static MainMap_Space Space;
        static MainMap_Word Word;
        static MainMap_I I;
        static MainMap_N N;
        static MainMap_OpenBracket OpenBracket;
        static MainMap_CloseBracket CloseBracket;
        static MainMap_Correct Correct;
        static MainMap_Incorrect Incorrect;
    };

    class MainMap_Default :
        public TranslatorState
    {
    public:

        MainMap_Default(const char * const name, const int stateId)
        : TranslatorState(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_F :
        public MainMap_Default
    {
    public:
        MainMap_F(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_O :
        public MainMap_Default
    {
    public:
        MainMap_O(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_R :
        public MainMap_Default
    {
    public:
        MainMap_R(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_Space :
        public MainMap_Default
    {
    public:
        MainMap_Space(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_Word :
        public MainMap_Default
    {
    public:
        MainMap_Word(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_I :
        public MainMap_Default
    {
    public:
        MainMap_I(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_N :
        public MainMap_Default
    {
    public:
        MainMap_N(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_OpenBracket :
        public MainMap_Default
    {
    public:
        MainMap_OpenBracket(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_CloseBracket :
        public MainMap_Default
    {
    public:
        MainMap_CloseBracket(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_Correct :
        public MainMap_Default
    {
    public:
        MainMap_Correct(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class MainMap_Incorrect :
        public MainMap_Default
    {
    public:
        MainMap_Incorrect(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void readNext(automatContext& context);
    };

    class automatContext :
        public statemap::FSMContext
    {
    public:

        explicit automatContext(Translator& owner)
        : FSMContext(MainMap::F),
          _owner(owner)
        {};

        automatContext(Translator& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        inline Translator& getOwner()
        {
            return (_owner);
        };

        inline TranslatorState& getState()
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return dynamic_cast<TranslatorState&>(*_state);
        };

        inline void readNext()
        {
            getState().readNext(*this);
        };

    private:
        Translator& _owner;
    };
}


#endif // AUTOMAT_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
