//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : turnstile.sm
//

#include "Header"
#include "turnstile_sm.h"

using namespace statemap;

namespace turnstile
{
    // Static class declarations.
    MainMap_Locked MainMap::Locked("MainMap::Locked", 0);
    MainMap_Unlocked MainMap::Unlocked("MainMap::Unlocked", 1);

    void TurnstileState::dropCoin(turnstileContext& context)
    {
        Default(context);
    }

    void TurnstileState::pass(turnstileContext& context)
    {
        Default(context);
    }

    void TurnstileState::Default(turnstileContext& context)
    {
        throw (
            TransitionUndefinedException(
                (context.getState()).getName(),
                context.getTransition()));

    }

    void MainMap_Locked::dropCoin(turnstileContext& context)
    {
        Turnstile& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.unlock();
            context.setState(MainMap::Unlocked);
        }
        catch (...)
        {
            context.setState(MainMap::Unlocked);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Locked::pass(turnstileContext& context)
    {
        Turnstile& ctxt = context.getOwner();

        TurnstileState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.alarm();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }


    }

    void MainMap_Unlocked::dropCoin(turnstileContext& context)
    {
        Turnstile& ctxt = context.getOwner();

        TurnstileState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.thanks();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }


    }

    void MainMap_Unlocked::pass(turnstileContext& context)
    {
        Turnstile& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.lock();
            context.setState(MainMap::Locked);
        }
        catch (...)
        {
            context.setState(MainMap::Locked);
            throw;
        }
        context.getState().Entry(context);


    }
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
