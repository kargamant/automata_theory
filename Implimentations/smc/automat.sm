%header SmcRecognizer.h

%class SmcRecognizer
%package SmcRecognizer

%start MainMap::F
%map MainMap
%%

Default
{
	readNext() [ctxt.lastRead()!=1] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==0] nil {}
}

F
{
	readNext() [ctxt.lastRead()=='f'] O {}
}

O
{
	readNext() [ctxt.lastRead()=='o'] R {}
}

R
{
	readNext() [ctxt.lastRead()=='r'] Space1 {}
}

Space1
{
	readNext() [ctxt.lastRead()==' '] nil {}
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && !ctxt.isNumber()] Variable {}
}

Variable
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n' && ctxt.isValidRead()] nil {}
	readNext() [ctxt.lastRead()==' '] Space2 {}
}

Space2
{
	readNext() [ctxt.lastRead()==' '] nil {}
	readNext() [ctxt.lastRead()=='i'] I {}
	readNext() [ctxt.lastRead()=='('] OpenBracket {}
}

I
{
	readNext() [ctxt.lastRead()=='n'] N {}
}

N
{
	readNext() [ctxt.lastRead()==' '] Space2 {}
}

OpenBracket
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.lastRead()!='\n' && ctxt.lastRead()!=39 && ctxt.lastRead()!=34] Word {}
	readNext() [ctxt.lastRead()==' '] Space3 {}
	readNext() [ctxt.lastRead()==39] SingleQoute {}
	readNext() [ctxt.lastRead()==34] DoubleQoute {}
}

Word
{
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()==' '] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

SingleQoute
{
	readNext() [ctxt.lastRead()!=39 && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()=='\n'] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==39] AfterQoute {}
}

DoubleQoute
{
	readNext() [ctxt.lastRead()!=34 && ctxt.lastRead()!='\n'] nil {}
	readNext() [ctxt.lastRead()=='\n'] Incorrect {incorrect(); setStopped(true);}
	readNext() [ctxt.lastRead()==34] AfterQoute {}
}

AfterQoute
{
	readNext() [ctxt.lastRead()==' '] Space3 {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
}

Space3
{
	readNext() [ctxt.lastRead()==' '] nil {}
	readNext() [ctxt.lastRead()!=' ' && ctxt.isValidRead() && ctxt.lastRead()!='\n'] Word {}
	readNext() [ctxt.lastRead()==')'] CloseBracket {}	
	readNext() [ctxt.lastRead()==39] SingleQoute {}
	readNext() [ctxt.lastRead()==34] DoubleQoute {}
}

CloseBracket
{
	readNext() Correct {correct();}
}

Correct
{
	readNext() [ctxt.lastRead()=='f'] O {}
}

Incorrect
{
	readNext() [ctxt.lastRead()=='f'] O {}
}
%%
