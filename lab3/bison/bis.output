Terminals unused in grammar

    "<"
    ">"
    RIGHT_ASSIGN


State 8 conflicts: 2 reduce/reduce
State 9 conflicts: 2 reduce/reduce
State 16 conflicts: 2 reduce/reduce
State 21 conflicts: 1 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 47 conflicts: 2 shift/reduce
State 49 conflicts: 2 shift/reduce
State 50 conflicts: 4 shift/reduce
State 51 conflicts: 4 shift/reduce
State 63 conflicts: 2 reduce/reduce


Grammar

    0 $accept: complex_statement $end

    1 complex_statement: simple_statement ',' complex_statement
    2                  | simple_statement '.'

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand
    4                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand
    5                 | '@' operand

    6 operand: numeric_operand
    7        | VAR_NAME
    8        | VAR_NAME '[' LITERAL LITERAL ']'

    9 numeric_operand: LITERAL
   10                | expr
   11                | logic_expr

   12 expr_operand: LITERAL
   13             | VAR_NAME
   14             | VAR_NAME '[' LITERAL LITERAL ']'

   15 expr: expr_operand
   16     | '+' expr_operand
   17     | '-' expr_operand
   18     | expr '*' expr
   19     | expr '/' expr
   20     | expr '+' expr
   21     | expr '-' expr
   22     | '(' expr ')'

   23 logic_expr: logic_expr LESS_EQUAL logic_expr
   24           | logic_expr MORE_EQUAL logic_expr
   25           | logic_expr '<' logic_expr
   26           | logic_expr '>' logic_expr
   27           | '(' logic_expr ')'
   28           | expr

   29 vars: VAR_NAME vars
   30     | VAR_NAME
   31     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 22 27
    ')' (41) 22 27
    '*' (42) 18
    '+' (43) 16 20
    ',' (44) 1
    '-' (45) 17 21
    '.' (46) 2
    '/' (47) 19
    '<' (60) 25
    '>' (62) 26
    '@' (64) 5
    '[' (91) 8 14
    ']' (93) 8 14
    error (256)
    VAR_NAME <str> (258) 3 4 7 8 13 14 29 30
    VAR_TYPE <var_type> (259) 3 4
    LITERAL <num> (260) 8 9 12 14
    ARRAY (261) 4
    LESS_EQUAL (262) 23
    MORE_EQUAL (263) 24
    "<" (264)
    ">" (265)
    LEFT_ASSIGN (266) 3 4
    RIGHT_ASSIGN (267)


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    complex_statement <st> (27)
        on left: 1 2
        on right: 0 1
    simple_statement <st> (28)
        on left: 3 4 5
        on right: 1 2
    operand <st> (29)
        on left: 6 7 8
        on right: 3 4 5
    numeric_operand <st> (30)
        on left: 9 10 11
        on right: 6
    logic_expr <st> (31)
        on left: 23 24 25 26 27 28
        on right: 11 23 24 25 26 27
    expr <st> (32)
        on left: 15 16 17 18 19 20 21 22
        on right: 10 18 19 20 21 22 28
    expr_operand <st> (33)
        on left: 12 13 14
        on right: 15 16 17
    vars (34)
        on left: 29 30 31
        on right: 3 4 29


State 0

    0 $accept: . complex_statement $end

    VAR_TYPE  shift, and go to state 1
    ARRAY     shift, and go to state 2
    '@'       shift, and go to state 3

    complex_statement  go to state 4
    simple_statement   go to state 5


State 1

    3 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 6


State 2

    4 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 7


State 3

    5 simple_statement: '@' . operand

    VAR_NAME  shift, and go to state 8
    LITERAL   shift, and go to state 9
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    operand          go to state 13
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 4

    0 $accept: complex_statement . $end

    $end  shift, and go to state 18


State 5

    1 complex_statement: simple_statement . ',' complex_statement
    2                  | simple_statement . '.'

    ','  shift, and go to state 19
    '.'  shift, and go to state 20


State 6

    3 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 21

    $default  reduce using rule 31 (vars)

    vars  go to state 22


State 7

    4 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 23


State 8

    7 operand: VAR_NAME .
    8        | VAR_NAME . '[' LITERAL LITERAL ']'
   13 expr_operand: VAR_NAME .
   14             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 24

    ','       reduce using rule 7 (operand)
    ','       [reduce using rule 13 (expr_operand)]
    '.'       reduce using rule 7 (operand)
    '.'       [reduce using rule 13 (expr_operand)]
    $default  reduce using rule 13 (expr_operand)


State 9

    9 numeric_operand: LITERAL .
   12 expr_operand: LITERAL .

    ','       reduce using rule 9 (numeric_operand)
    ','       [reduce using rule 12 (expr_operand)]
    '.'       reduce using rule 9 (numeric_operand)
    '.'       [reduce using rule 12 (expr_operand)]
    $default  reduce using rule 12 (expr_operand)


State 10

   16 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26

    expr_operand  go to state 27


State 11

   17 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26

    expr_operand  go to state 28


State 12

   22 expr: '(' . expr ')'
   27 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    logic_expr    go to state 29
    expr          go to state 30
    expr_operand  go to state 17


State 13

    5 simple_statement: '@' operand .

    $default  reduce using rule 5 (simple_statement)


State 14

    6 operand: numeric_operand .

    $default  reduce using rule 6 (operand)


State 15

   11 numeric_operand: logic_expr .
   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   24           | logic_expr . MORE_EQUAL logic_expr
   25           | logic_expr . '<' logic_expr
   26           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 31
    MORE_EQUAL  shift, and go to state 32
    '<'         shift, and go to state 33
    '>'         shift, and go to state 34

    $default  reduce using rule 11 (numeric_operand)


State 16

   10 numeric_operand: expr .
   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   28 logic_expr: expr .

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    ','       reduce using rule 10 (numeric_operand)
    ','       [reduce using rule 28 (logic_expr)]
    '.'       reduce using rule 10 (numeric_operand)
    '.'       [reduce using rule 28 (logic_expr)]
    $default  reduce using rule 28 (logic_expr)


State 17

   15 expr: expr_operand .

    $default  reduce using rule 15 (expr)


State 18

    0 $accept: complex_statement $end .

    $default  accept


State 19

    1 complex_statement: simple_statement ',' . complex_statement

    VAR_TYPE  shift, and go to state 1
    ARRAY     shift, and go to state 2
    '@'       shift, and go to state 3

    complex_statement  go to state 39
    simple_statement   go to state 5


State 20

    2 complex_statement: simple_statement '.' .

    $default  reduce using rule 2 (complex_statement)


State 21

   29 vars: VAR_NAME . vars
   30     | VAR_NAME .

    VAR_NAME  shift, and go to state 21

    LEFT_ASSIGN  reduce using rule 30 (vars)
    LEFT_ASSIGN  [reduce using rule 31 (vars)]
    $default     reduce using rule 30 (vars)

    vars  go to state 40


State 22

    3 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 41


State 23

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 42


State 24

    8 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   14 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 43


State 25

   13 expr_operand: VAR_NAME .
   14             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 44

    $default  reduce using rule 13 (expr_operand)


State 26

   12 expr_operand: LITERAL .

    $default  reduce using rule 12 (expr_operand)


State 27

   16 expr: '+' expr_operand .

    $default  reduce using rule 16 (expr)


State 28

   17 expr: '-' expr_operand .

    $default  reduce using rule 17 (expr)


State 29

   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   24           | logic_expr . MORE_EQUAL logic_expr
   25           | logic_expr . '<' logic_expr
   26           | logic_expr . '>' logic_expr
   27           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 31
    MORE_EQUAL  shift, and go to state 32
    ')'         shift, and go to state 45
    '<'         shift, and go to state 33
    '>'         shift, and go to state 34


State 30

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | '(' expr . ')'
   28 logic_expr: expr .

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38
    ')'  shift, and go to state 46

    ')'       [reduce using rule 28 (logic_expr)]
    $default  reduce using rule 28 (logic_expr)


State 31

   23 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    logic_expr    go to state 47
    expr          go to state 48
    expr_operand  go to state 17


State 32

   24 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    logic_expr    go to state 49
    expr          go to state 48
    expr_operand  go to state 17


State 33

   25 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    logic_expr    go to state 50
    expr          go to state 48
    expr_operand  go to state 17


State 34

   26 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    logic_expr    go to state 51
    expr          go to state 48
    expr_operand  go to state 17


State 35

   20 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 52

    expr          go to state 53
    expr_operand  go to state 17


State 36

   21 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 52

    expr          go to state 54
    expr_operand  go to state 17


State 37

   18 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 52

    expr          go to state 55
    expr_operand  go to state 17


State 38

   19 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 52

    expr          go to state 56
    expr_operand  go to state 17


State 39

    1 complex_statement: simple_statement ',' complex_statement .

    $default  reduce using rule 1 (complex_statement)


State 40

   29 vars: VAR_NAME vars .

    $default  reduce using rule 29 (vars)


State 41

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 8
    LITERAL   shift, and go to state 9
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    operand          go to state 57
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 42

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 21

    $default  reduce using rule 31 (vars)

    vars  go to state 58


State 43

    8 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   14 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 59


State 44

   14 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 60


State 45

   27 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 27 (logic_expr)


State 46

   22 expr: '(' expr ')' .

    $default  reduce using rule 22 (expr)


State 47

   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   23           | logic_expr LESS_EQUAL logic_expr .
   24           | logic_expr . MORE_EQUAL logic_expr
   25           | logic_expr . '<' logic_expr
   26           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 33
    '>'  shift, and go to state 34

    '<'       [reduce using rule 23 (logic_expr)]
    '>'       [reduce using rule 23 (logic_expr)]
    $default  reduce using rule 23 (logic_expr)


State 48

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   28 logic_expr: expr .

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 28 (logic_expr)


State 49

   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   24           | logic_expr . MORE_EQUAL logic_expr
   24           | logic_expr MORE_EQUAL logic_expr .
   25           | logic_expr . '<' logic_expr
   26           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 33
    '>'  shift, and go to state 34

    '<'       [reduce using rule 24 (logic_expr)]
    '>'       [reduce using rule 24 (logic_expr)]
    $default  reduce using rule 24 (logic_expr)


State 50

   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   24           | logic_expr . MORE_EQUAL logic_expr
   25           | logic_expr . '<' logic_expr
   25           | logic_expr '<' logic_expr .
   26           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 31
    MORE_EQUAL  shift, and go to state 32
    '<'         shift, and go to state 33
    '>'         shift, and go to state 34

    LESS_EQUAL  [reduce using rule 25 (logic_expr)]
    MORE_EQUAL  [reduce using rule 25 (logic_expr)]
    '<'         [reduce using rule 25 (logic_expr)]
    '>'         [reduce using rule 25 (logic_expr)]
    $default    reduce using rule 25 (logic_expr)


State 51

   23 logic_expr: logic_expr . LESS_EQUAL logic_expr
   24           | logic_expr . MORE_EQUAL logic_expr
   25           | logic_expr . '<' logic_expr
   26           | logic_expr . '>' logic_expr
   26           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 31
    MORE_EQUAL  shift, and go to state 32
    '<'         shift, and go to state 33
    '>'         shift, and go to state 34

    LESS_EQUAL  [reduce using rule 26 (logic_expr)]
    MORE_EQUAL  [reduce using rule 26 (logic_expr)]
    '<'         [reduce using rule 26 (logic_expr)]
    '>'         [reduce using rule 26 (logic_expr)]
    $default    reduce using rule 26 (logic_expr)


State 52

   22 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 25
    LITERAL   shift, and go to state 26
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 52

    expr          go to state 61
    expr_operand  go to state 17


State 53

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr

    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 20 (expr)


State 54

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .

    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 21 (expr)


State 55

   18 expr: expr . '*' expr
   18     | expr '*' expr .
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr

    $default  reduce using rule 18 (expr)


State 56

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   19     | expr '/' expr .
   20     | expr . '+' expr
   21     | expr . '-' expr

    $default  reduce using rule 19 (expr)


State 57

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand .

    $default  reduce using rule 3 (simple_statement)


State 58

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 62


State 59

    8 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   14 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 63


State 60

   14 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 64


State 61

   18 expr: expr . '*' expr
   19     | expr . '/' expr
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | '(' expr . ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38
    ')'  shift, and go to state 46


State 62

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 8
    LITERAL   shift, and go to state 9
    '+'       shift, and go to state 10
    '-'       shift, and go to state 11
    '('       shift, and go to state 12

    operand          go to state 65
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 63

    8 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   14 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    ','       reduce using rule 8 (operand)
    ','       [reduce using rule 14 (expr_operand)]
    '.'       reduce using rule 8 (operand)
    '.'       [reduce using rule 14 (expr_operand)]
    $default  reduce using rule 14 (expr_operand)


State 64

   14 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 66


State 65

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand .

    $default  reduce using rule 4 (simple_statement)


State 66

   14 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 14 (expr_operand)
