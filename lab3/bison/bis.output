Terminals unused in grammar

    "<"
    ">"


State 1 conflicts: 4 reduce/reduce
State 3 conflicts: 4 reduce/reduce
State 14 conflicts: 4 reduce/reduce
State 26 conflicts: 1 shift/reduce
State 41 conflicts: 1 reduce/reduce
State 50 conflicts: 2 shift/reduce
State 52 conflicts: 2 shift/reduce
State 53 conflicts: 4 shift/reduce
State 54 conflicts: 4 shift/reduce
State 66 conflicts: 4 reduce/reduce


Grammar

    0 $accept: complex_statement $end

    1 complex_statement: simple_statement ',' complex_statement
    2                  | simple_statement '.'

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand
    4                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand
    5                 | assign_expr
    6                 | '@' operand

    7 assign_expr: operand LEFT_ASSIGN assign_expr
    8            | operand RIGHT_ASSIGN assign_expr
    9            | operand

   10 operand: numeric_operand
   11        | VAR_NAME
   12        | VAR_NAME '[' LITERAL LITERAL ']'

   13 numeric_operand: LITERAL
   14                | expr
   15                | logic_expr

   16 expr_operand: LITERAL
   17             | VAR_NAME
   18             | VAR_NAME '[' LITERAL LITERAL ']'

   19 expr: expr_operand
   20     | '+' expr_operand
   21     | '-' expr_operand
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '+' expr
   25     | expr '-' expr
   26     | '(' expr ')'

   27 logic_expr: logic_expr LESS_EQUAL logic_expr
   28           | logic_expr MORE_EQUAL logic_expr
   29           | logic_expr '<' logic_expr
   30           | logic_expr '>' logic_expr
   31           | '(' logic_expr ')'
   32           | expr

   33 vars: VAR_NAME vars
   34     | VAR_NAME
   35     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 26 31
    ')' (41) 26 31
    '*' (42) 22
    '+' (43) 20 24
    ',' (44) 1
    '-' (45) 21 25
    '.' (46) 2
    '/' (47) 23
    '<' (60) 29
    '>' (62) 30
    '@' (64) 6
    '[' (91) 12 18
    ']' (93) 12 18
    error (256)
    VAR_NAME <str> (258) 3 4 11 12 17 18 33 34
    VAR_TYPE <var_type> (259) 3 4
    LITERAL <num> (260) 12 13 16 18
    ARRAY (261) 4
    LESS_EQUAL (262) 27
    MORE_EQUAL (263) 28
    "<" (264)
    ">" (265)
    LEFT_ASSIGN (266) 3 4 7
    RIGHT_ASSIGN (267) 8


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    complex_statement <st> (27)
        on left: 1 2
        on right: 0 1
    simple_statement <st> (28)
        on left: 3 4 5 6
        on right: 1 2
    operand <st> (29)
        on left: 10 11 12
        on right: 3 4 6 7 8 9
    numeric_operand <st> (30)
        on left: 13 14 15
        on right: 10
    logic_expr <st> (31)
        on left: 27 28 29 30 31 32
        on right: 15 27 28 29 30 31
    expr <st> (32)
        on left: 19 20 21 22 23 24 25 26
        on right: 14 22 23 24 25 26 32
    expr_operand <st> (33)
        on left: 16 17 18
        on right: 19 20 21
    assign_expr (34)
        on left: 7 8 9
        on right: 5 7 8
    vars (35)
        on left: 33 34 35
        on right: 3 4 33


State 0

    0 $accept: . complex_statement $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '@'       shift, and go to state 7
    '('       shift, and go to state 8

    complex_statement  go to state 9
    simple_statement   go to state 10
    operand            go to state 11
    numeric_operand    go to state 12
    logic_expr         go to state 13
    expr               go to state 14
    expr_operand       go to state 15
    assign_expr        go to state 16


State 1

   11 operand: VAR_NAME .
   12        | VAR_NAME . '[' LITERAL LITERAL ']'
   17 expr_operand: VAR_NAME .
   18             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 17

    LEFT_ASSIGN   reduce using rule 11 (operand)
    LEFT_ASSIGN   [reduce using rule 17 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 11 (operand)
    RIGHT_ASSIGN  [reduce using rule 17 (expr_operand)]
    ','           reduce using rule 11 (operand)
    ','           [reduce using rule 17 (expr_operand)]
    '.'           reduce using rule 11 (operand)
    '.'           [reduce using rule 17 (expr_operand)]
    $default      reduce using rule 17 (expr_operand)


State 2

    3 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 18


State 3

   13 numeric_operand: LITERAL .
   16 expr_operand: LITERAL .

    LEFT_ASSIGN   reduce using rule 13 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 16 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 13 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 16 (expr_operand)]
    ','           reduce using rule 13 (numeric_operand)
    ','           [reduce using rule 16 (expr_operand)]
    '.'           reduce using rule 13 (numeric_operand)
    '.'           [reduce using rule 16 (expr_operand)]
    $default      reduce using rule 16 (expr_operand)


State 4

    4 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 19


State 5

   20 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21

    expr_operand  go to state 22


State 6

   21 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21

    expr_operand  go to state 23


State 7

    6 simple_statement: '@' . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    operand          go to state 24
    numeric_operand  go to state 12
    logic_expr       go to state 13
    expr             go to state 14
    expr_operand     go to state 15


State 8

   26 expr: '(' . expr ')'
   31 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    logic_expr    go to state 25
    expr          go to state 26
    expr_operand  go to state 15


State 9

    0 $accept: complex_statement . $end

    $end  shift, and go to state 27


State 10

    1 complex_statement: simple_statement . ',' complex_statement
    2                  | simple_statement . '.'

    ','  shift, and go to state 28
    '.'  shift, and go to state 29


State 11

    7 assign_expr: operand . LEFT_ASSIGN assign_expr
    8            | operand . RIGHT_ASSIGN assign_expr
    9            | operand .

    LEFT_ASSIGN   shift, and go to state 30
    RIGHT_ASSIGN  shift, and go to state 31

    $default  reduce using rule 9 (assign_expr)


State 12

   10 operand: numeric_operand .

    $default  reduce using rule 10 (operand)


State 13

   15 numeric_operand: logic_expr .
   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 32
    MORE_EQUAL  shift, and go to state 33
    '<'         shift, and go to state 34
    '>'         shift, and go to state 35

    $default  reduce using rule 15 (numeric_operand)


State 14

   14 numeric_operand: expr .
   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   32 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    LESS_EQUAL    reduce using rule 32 (logic_expr)
    MORE_EQUAL    reduce using rule 32 (logic_expr)
    LEFT_ASSIGN   reduce using rule 14 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 32 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 14 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 32 (logic_expr)]
    ','           reduce using rule 14 (numeric_operand)
    ','           [reduce using rule 32 (logic_expr)]
    '.'           reduce using rule 14 (numeric_operand)
    '.'           [reduce using rule 32 (logic_expr)]
    '<'           reduce using rule 32 (logic_expr)
    '>'           reduce using rule 32 (logic_expr)
    $default      reduce using rule 14 (numeric_operand)


State 15

   19 expr: expr_operand .

    $default  reduce using rule 19 (expr)


State 16

    5 simple_statement: assign_expr .

    $default  reduce using rule 5 (simple_statement)


State 17

   12 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   18 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 40


State 18

    3 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 41

    $default  reduce using rule 35 (vars)

    vars  go to state 42


State 19

    4 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 43


State 20

   17 expr_operand: VAR_NAME .
   18             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 44

    $default  reduce using rule 17 (expr_operand)


State 21

   16 expr_operand: LITERAL .

    $default  reduce using rule 16 (expr_operand)


State 22

   20 expr: '+' expr_operand .

    $default  reduce using rule 20 (expr)


State 23

   21 expr: '-' expr_operand .

    $default  reduce using rule 21 (expr)


State 24

    6 simple_statement: '@' operand .

    $default  reduce using rule 6 (simple_statement)


State 25

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr
   31           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 32
    MORE_EQUAL  shift, and go to state 33
    ')'         shift, and go to state 45
    '<'         shift, and go to state 34
    '>'         shift, and go to state 35


State 26

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   26     | '(' expr . ')'
   32 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    ')'  shift, and go to state 46

    ')'       [reduce using rule 32 (logic_expr)]
    $default  reduce using rule 32 (logic_expr)


State 27

    0 $accept: complex_statement $end .

    $default  accept


State 28

    1 complex_statement: simple_statement ',' . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '@'       shift, and go to state 7
    '('       shift, and go to state 8

    complex_statement  go to state 47
    simple_statement   go to state 10
    operand            go to state 11
    numeric_operand    go to state 12
    logic_expr         go to state 13
    expr               go to state 14
    expr_operand       go to state 15
    assign_expr        go to state 16


State 29

    2 complex_statement: simple_statement '.' .

    $default  reduce using rule 2 (complex_statement)


State 30

    7 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    operand          go to state 11
    numeric_operand  go to state 12
    logic_expr       go to state 13
    expr             go to state 14
    expr_operand     go to state 15
    assign_expr      go to state 48


State 31

    8 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    operand          go to state 11
    numeric_operand  go to state 12
    logic_expr       go to state 13
    expr             go to state 14
    expr_operand     go to state 15
    assign_expr      go to state 49


State 32

   27 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    logic_expr    go to state 50
    expr          go to state 51
    expr_operand  go to state 15


State 33

   28 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    logic_expr    go to state 52
    expr          go to state 51
    expr_operand  go to state 15


State 34

   29 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    logic_expr    go to state 53
    expr          go to state 51
    expr_operand  go to state 15


State 35

   30 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    logic_expr    go to state 54
    expr          go to state 51
    expr_operand  go to state 15


State 36

   24 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 55

    expr          go to state 56
    expr_operand  go to state 15


State 37

   25 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 55

    expr          go to state 57
    expr_operand  go to state 15


State 38

   22 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 55

    expr          go to state 58
    expr_operand  go to state 15


State 39

   23 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 55

    expr          go to state 59
    expr_operand  go to state 15


State 40

   12 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   18 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 60


State 41

   33 vars: VAR_NAME . vars
   34     | VAR_NAME .

    VAR_NAME  shift, and go to state 41

    LEFT_ASSIGN  reduce using rule 34 (vars)
    LEFT_ASSIGN  [reduce using rule 35 (vars)]
    $default     reduce using rule 34 (vars)

    vars  go to state 61


State 42

    3 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 62


State 43

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 63


State 44

   18 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 64


State 45

   31 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 31 (logic_expr)


State 46

   26 expr: '(' expr ')' .

    $default  reduce using rule 26 (expr)


State 47

    1 complex_statement: simple_statement ',' complex_statement .

    $default  reduce using rule 1 (complex_statement)


State 48

    7 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 7 (assign_expr)


State 49

    8 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 8 (assign_expr)


State 50

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   27           | logic_expr LESS_EQUAL logic_expr .
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 34
    '>'  shift, and go to state 35

    '<'       [reduce using rule 27 (logic_expr)]
    '>'       [reduce using rule 27 (logic_expr)]
    $default  reduce using rule 27 (logic_expr)


State 51

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   32 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 32 (logic_expr)


State 52

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   28           | logic_expr MORE_EQUAL logic_expr .
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 34
    '>'  shift, and go to state 35

    '<'       [reduce using rule 28 (logic_expr)]
    '>'       [reduce using rule 28 (logic_expr)]
    $default  reduce using rule 28 (logic_expr)


State 53

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   29           | logic_expr '<' logic_expr .
   30           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 32
    MORE_EQUAL  shift, and go to state 33
    '<'         shift, and go to state 34
    '>'         shift, and go to state 35

    LESS_EQUAL  [reduce using rule 29 (logic_expr)]
    MORE_EQUAL  [reduce using rule 29 (logic_expr)]
    '<'         [reduce using rule 29 (logic_expr)]
    '>'         [reduce using rule 29 (logic_expr)]
    $default    reduce using rule 29 (logic_expr)


State 54

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr
   30           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 32
    MORE_EQUAL  shift, and go to state 33
    '<'         shift, and go to state 34
    '>'         shift, and go to state 35

    LESS_EQUAL  [reduce using rule 30 (logic_expr)]
    MORE_EQUAL  [reduce using rule 30 (logic_expr)]
    '<'         [reduce using rule 30 (logic_expr)]
    '>'         [reduce using rule 30 (logic_expr)]
    $default    reduce using rule 30 (logic_expr)


State 55

   26 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 20
    LITERAL   shift, and go to state 21
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 55

    expr          go to state 65
    expr_operand  go to state 15


State 56

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   24     | expr '+' expr .
   25     | expr . '-' expr

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 24 (expr)


State 57

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   25     | expr '-' expr .

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 25 (expr)


State 58

   22 expr: expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr

    $default  reduce using rule 22 (expr)


State 59

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '+' expr
   25     | expr . '-' expr

    $default  reduce using rule 23 (expr)


State 60

   12 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   18 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 66


State 61

   33 vars: VAR_NAME vars .

    $default  reduce using rule 33 (vars)


State 62

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    operand          go to state 67
    numeric_operand  go to state 12
    logic_expr       go to state 13
    expr             go to state 14
    expr_operand     go to state 15


State 63

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 41

    $default  reduce using rule 35 (vars)

    vars  go to state 68


State 64

   18 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 69


State 65

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   26     | '(' expr . ')'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    ')'  shift, and go to state 46


State 66

   12 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   18 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    LEFT_ASSIGN   reduce using rule 12 (operand)
    LEFT_ASSIGN   [reduce using rule 18 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 12 (operand)
    RIGHT_ASSIGN  [reduce using rule 18 (expr_operand)]
    ','           reduce using rule 12 (operand)
    ','           [reduce using rule 18 (expr_operand)]
    '.'           reduce using rule 12 (operand)
    '.'           [reduce using rule 18 (expr_operand)]
    $default      reduce using rule 18 (expr_operand)


State 67

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand .

    $default  reduce using rule 3 (simple_statement)


State 68

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 70


State 69

   18 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 71


State 70

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 8

    operand          go to state 72
    numeric_operand  go to state 12
    logic_expr       go to state 13
    expr             go to state 14
    expr_operand     go to state 15


State 71

   18 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 18 (expr_operand)


State 72

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand .

    $default  reduce using rule 4 (simple_statement)
