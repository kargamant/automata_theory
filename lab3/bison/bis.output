Terminals unused in grammar

    "<"
    ">"


State 1 conflicts: 1 shift/reduce, 10 reduce/reduce
State 3 conflicts: 11 reduce/reduce
State 19 conflicts: 4 reduce/reduce
State 27 conflicts: 1 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 33 conflicts: 2 shift/reduce
State 36 conflicts: 2 shift/reduce, 9 reduce/reduce
State 42 conflicts: 11 reduce/reduce
State 45 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce, 5 reduce/reduce
State 65 conflicts: 1 reduce/reduce
State 86 conflicts: 2 shift/reduce
State 87 conflicts: 2 shift/reduce
State 88 conflicts: 4 shift/reduce
State 89 conflicts: 4 shift/reduce
State 93 conflicts: 10 reduce/reduce
State 98 conflicts: 1 shift/reduce, 5 reduce/reduce
State 104 conflicts: 10 reduce/reduce
State 105 conflicts: 10 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: complex_statement

    2 complex_statement: simple_statement complex_statement
    3                  | simple_statement '.'

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN expr ','
    5                 | ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ','
    6                 | assign_expr ','
    7                 | '@' operand ','
    8                 | UNTIL logic_expr DO complex_statement
    9                 | CHECK logic_expr DO complex_statement
   10                 | VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ','
   11                 | RETURN operand ','
   12                 | GO ','
   13                 | RR ','
   14                 | RL ','

   15 args_to_call: operand args_to_call
   16             | operand

   17 args: VAR_TYPE VAR_NAME args
   18     | VAR_TYPE VAR_NAME

   19 assign_expr: operand LEFT_ASSIGN assign_expr
   20            | operand RIGHT_ASSIGN assign_expr
   21            | expr
   22            | operand

   23 operand: numeric_operand
   24        | VAR_NAME
   25        | VAR_NAME '[' numeric_operand numeric_operand ']'
   26        | VAR_NAME '[' LITERAL LITERAL ']'
   27        | VAR_NAME '(' args_to_call ')'
   28        | SONAR

   29 numeric_operand: LITERAL
   30                | '-' LITERAL
   31                | expr
   32                | logic_expr

   33 expr_operand: LITERAL
   34             | VAR_NAME
   35             | VAR_NAME '[' numeric_operand numeric_operand ']'
   36             | VAR_NAME '[' LITERAL LITERAL ']'
   37             | VAR_NAME '(' args_to_call ')'

   38 expr: expr_operand
   39     | '+' expr_operand
   40     | '-' expr_operand
   41     | expr '*' expr
   42     | expr '/' expr
   43     | expr '+' expr
   44     | expr '-' expr
   45     | '(' expr ')'

   46 logic_expr: logic_expr LESS_EQUAL logic_expr
   47           | logic_expr MORE_EQUAL logic_expr
   48           | logic_expr '<' logic_expr
   49           | logic_expr '>' logic_expr
   50           | '(' logic_expr ')'
   51           | expr

   52 vars: VAR_NAME vars
   53     | VAR_NAME
   54     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 27 37 45 50
    ')' (41) 27 37 45 50
    '*' (42) 41
    '+' (43) 39 43
    ',' (44) 4 5 6 7 10 11 12 13 14
    '-' (45) 30 40 44
    '.' (46) 3
    '/' (47) 42
    '<' (60) 48
    '>' (62) 49
    '@' (64) 7
    '[' (91) 25 26 35 36
    ']' (93) 25 26 35 36
    error (256)
    VAR_NAME <str> (258) 10 17 18 24 25 26 27 34 35 36 37 52 53
    VAR_TYPE <var_type> (259) 4 5 10 17 18
    LITERAL <num> (260) 26 29 30 33 36
    ARRAY (261) 5
    UNTIL (262) 8
    DO (263) 8 9
    CHECK (264) 9
    BEGIN_FUNC (265) 10
    END_FUNC (266) 10
    RETURN (267) 11
    GO (268) 12
    RL (269) 14
    RR (270) 13
    SONAR (271) 28
    LESS_EQUAL (272) 46
    MORE_EQUAL (273) 47
    "<" (274)
    ">" (275)
    LEFT_ASSIGN (276) 4 5 19
    RIGHT_ASSIGN (277) 20


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    main <st> (37)
        on left: 1
        on right: 0
    complex_statement <st> (38)
        on left: 2 3
        on right: 1 2 8 9 10
    simple_statement <st> (39)
        on left: 4 5 6 7 8 9 10 11 12 13 14
        on right: 2 3
    args <st> (40)
        on left: 17 18
        on right: 10 17
    expr <st> (41)
        on left: 38 39 40 41 42 43 44 45
        on right: 4 21 31 41 42 43 44 45 51
    operand <st> (42)
        on left: 23 24 25 26 27 28
        on right: 5 7 11 15 16 19 20 22
    numeric_operand <st> (43)
        on left: 29 30 31 32
        on right: 23 25 35
    logic_expr <st> (44)
        on left: 46 47 48 49 50 51
        on right: 8 9 32 46 47 48 49 50
    expr_operand <st> (45)
        on left: 33 34 35 36 37
        on right: 38 39 40
    assign_expr <st> (46)
        on left: 19 20 21 22
        on right: 6 19 20
    args_to_call <st> (47)
        on left: 15 16
        on right: 15 27 37
    vars <st> (48)
        on left: 52 53 54
        on right: 4 5 52


State 0

    0 $accept: . main $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    GO        shift, and go to state 8
    RL        shift, and go to state 9
    RR        shift, and go to state 10
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '@'       shift, and go to state 14
    '('       shift, and go to state 15

    main               go to state 16
    complex_statement  go to state 17
    simple_statement   go to state 18
    expr               go to state 19
    operand            go to state 20
    numeric_operand    go to state 21
    logic_expr         go to state 22
    expr_operand       go to state 23
    assign_expr        go to state 24


State 1

   24 operand: VAR_NAME .
   25        | VAR_NAME . '[' numeric_operand numeric_operand ']'
   26        | VAR_NAME . '[' LITERAL LITERAL ']'
   27        | VAR_NAME . '(' args_to_call ')'
   34 expr_operand: VAR_NAME .
   35             | VAR_NAME . '[' numeric_operand numeric_operand ']'
   36             | VAR_NAME . '[' LITERAL LITERAL ']'
   37             | VAR_NAME . '(' args_to_call ')'

    '['  shift, and go to state 25
    '('  shift, and go to state 26

    VAR_NAME      reduce using rule 24 (operand)
    VAR_NAME      [reduce using rule 34 (expr_operand)]
    LITERAL       reduce using rule 24 (operand)
    LITERAL       [reduce using rule 34 (expr_operand)]
    SONAR         reduce using rule 24 (operand)
    SONAR         [reduce using rule 34 (expr_operand)]
    '+'           reduce using rule 24 (operand)
    '+'           [reduce using rule 34 (expr_operand)]
    '-'           reduce using rule 24 (operand)
    '-'           [reduce using rule 34 (expr_operand)]
    '*'           reduce using rule 34 (expr_operand)
    '/'           reduce using rule 34 (expr_operand)
    LESS_EQUAL    reduce using rule 34 (expr_operand)
    MORE_EQUAL    reduce using rule 34 (expr_operand)
    LEFT_ASSIGN   reduce using rule 24 (operand)
    LEFT_ASSIGN   [reduce using rule 34 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 24 (operand)
    RIGHT_ASSIGN  [reduce using rule 34 (expr_operand)]
    ','           reduce using rule 24 (operand)
    ','           [reduce using rule 34 (expr_operand)]
    '('           [reduce using rule 24 (operand)]
    '('           [reduce using rule 34 (expr_operand)]
    ')'           reduce using rule 24 (operand)
    ')'           [reduce using rule 34 (expr_operand)]
    '<'           reduce using rule 34 (expr_operand)
    '>'           reduce using rule 34 (expr_operand)
    $default      reduce using rule 24 (operand)


State 2

    4 simple_statement: VAR_TYPE . vars LEFT_ASSIGN expr ','
   10                 | VAR_TYPE . VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ','

    VAR_NAME  shift, and go to state 27

    $default  reduce using rule 54 (vars)

    vars  go to state 28


State 3

   29 numeric_operand: LITERAL .
   33 expr_operand: LITERAL .

    VAR_NAME      reduce using rule 29 (numeric_operand)
    VAR_NAME      [reduce using rule 33 (expr_operand)]
    LITERAL       reduce using rule 29 (numeric_operand)
    LITERAL       [reduce using rule 33 (expr_operand)]
    SONAR         reduce using rule 29 (numeric_operand)
    SONAR         [reduce using rule 33 (expr_operand)]
    '+'           reduce using rule 29 (numeric_operand)
    '+'           [reduce using rule 33 (expr_operand)]
    '-'           reduce using rule 29 (numeric_operand)
    '-'           [reduce using rule 33 (expr_operand)]
    '*'           reduce using rule 33 (expr_operand)
    '/'           reduce using rule 33 (expr_operand)
    LESS_EQUAL    reduce using rule 33 (expr_operand)
    MORE_EQUAL    reduce using rule 33 (expr_operand)
    LEFT_ASSIGN   reduce using rule 29 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 33 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 29 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 33 (expr_operand)]
    ','           reduce using rule 29 (numeric_operand)
    ','           [reduce using rule 33 (expr_operand)]
    ']'           reduce using rule 29 (numeric_operand)
    ']'           [reduce using rule 33 (expr_operand)]
    '('           reduce using rule 29 (numeric_operand)
    '('           [reduce using rule 33 (expr_operand)]
    ')'           reduce using rule 29 (numeric_operand)
    ')'           [reduce using rule 33 (expr_operand)]
    '<'           reduce using rule 33 (expr_operand)
    '>'           reduce using rule 33 (expr_operand)
    $default      reduce using rule 29 (numeric_operand)


State 4

    5 simple_statement: ARRAY . VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 29


State 5

    8 simple_statement: UNTIL . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 34
    expr_operand  go to state 23


State 6

    9 simple_statement: CHECK . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 35
    expr_operand  go to state 23


State 7

   11 simple_statement: RETURN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    operand          go to state 37
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23


State 8

   12 simple_statement: GO . ','

    ','  shift, and go to state 38


State 9

   14 simple_statement: RL . ','

    ','  shift, and go to state 39


State 10

   13 simple_statement: RR . ','

    ','  shift, and go to state 40


State 11

   28 operand: SONAR .

    $default  reduce using rule 28 (operand)


State 12

   39 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31

    expr_operand  go to state 41


State 13

   30 numeric_operand: '-' . LITERAL
   40 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 42

    expr_operand  go to state 43


State 14

    7 simple_statement: '@' . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    operand          go to state 44
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23


State 15

   45 expr: '(' . expr ')'
   50 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 45
    logic_expr    go to state 46
    expr_operand  go to state 23


State 16

    0 $accept: main . $end

    $end  shift, and go to state 47


State 17

    1 main: complex_statement .

    $default  reduce using rule 1 (main)


State 18

    2 complex_statement: simple_statement . complex_statement
    3                  | simple_statement . '.'

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    GO        shift, and go to state 8
    RL        shift, and go to state 9
    RR        shift, and go to state 10
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '.'       shift, and go to state 48
    '@'       shift, and go to state 14
    '('       shift, and go to state 15

    complex_statement  go to state 49
    simple_statement   go to state 18
    expr               go to state 19
    operand            go to state 20
    numeric_operand    go to state 21
    logic_expr         go to state 22
    expr_operand       go to state 23
    assign_expr        go to state 24


State 19

   21 assign_expr: expr .
   31 numeric_operand: expr .
   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   51 logic_expr: expr .

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    LEFT_ASSIGN   reduce using rule 31 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 51 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 31 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 51 (logic_expr)]
    ','           reduce using rule 21 (assign_expr)
    ','           [reduce using rule 31 (numeric_operand)]
    ','           [reduce using rule 51 (logic_expr)]
    $default      reduce using rule 51 (logic_expr)


State 20

   19 assign_expr: operand . LEFT_ASSIGN assign_expr
   20            | operand . RIGHT_ASSIGN assign_expr
   22            | operand .

    LEFT_ASSIGN   shift, and go to state 54
    RIGHT_ASSIGN  shift, and go to state 55

    $default  reduce using rule 22 (assign_expr)


State 21

   23 operand: numeric_operand .

    $default  reduce using rule 23 (operand)


State 22

   32 numeric_operand: logic_expr .
   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59

    $default  reduce using rule 32 (numeric_operand)


State 23

   38 expr: expr_operand .

    $default  reduce using rule 38 (expr)


State 24

    6 simple_statement: assign_expr . ','

    ','  shift, and go to state 60


State 25

   25 operand: VAR_NAME '[' . numeric_operand numeric_operand ']'
   26        | VAR_NAME '[' . LITERAL LITERAL ']'
   35 expr_operand: VAR_NAME '[' . numeric_operand numeric_operand ']'
   36             | VAR_NAME '[' . LITERAL LITERAL ']'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 61
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    numeric_operand  go to state 62
    logic_expr       go to state 22
    expr_operand     go to state 23


State 26

   27 operand: VAR_NAME '(' . args_to_call ')'
   37 expr_operand: VAR_NAME '(' . args_to_call ')'

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    operand          go to state 63
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23
    args_to_call     go to state 64


State 27

   10 simple_statement: VAR_TYPE VAR_NAME . args BEGIN_FUNC complex_statement END_FUNC ','
   52 vars: VAR_NAME . vars
   53     | VAR_NAME .

    VAR_NAME  shift, and go to state 65
    VAR_TYPE  shift, and go to state 66

    LEFT_ASSIGN  reduce using rule 53 (vars)
    LEFT_ASSIGN  [reduce using rule 54 (vars)]
    $default     reduce using rule 53 (vars)

    args  go to state 67
    vars  go to state 68


State 28

    4 simple_statement: VAR_TYPE vars . LEFT_ASSIGN expr ','

    LEFT_ASSIGN  shift, and go to state 69


State 29

    5 simple_statement: ARRAY VAR_TYPE . VAR_TYPE vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 70


State 30

   34 expr_operand: VAR_NAME .
   35             | VAR_NAME . '[' numeric_operand numeric_operand ']'
   36             | VAR_NAME . '[' LITERAL LITERAL ']'
   37             | VAR_NAME . '(' args_to_call ')'

    '['  shift, and go to state 71
    '('  shift, and go to state 72

    '('       [reduce using rule 34 (expr_operand)]
    $default  reduce using rule 34 (expr_operand)


State 31

   33 expr_operand: LITERAL .

    $default  reduce using rule 33 (expr_operand)


State 32

   40 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31

    expr_operand  go to state 43


State 33

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   51 logic_expr: expr .

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    '+'       [reduce using rule 51 (logic_expr)]
    '-'       [reduce using rule 51 (logic_expr)]
    $default  reduce using rule 51 (logic_expr)


State 34

    8 simple_statement: UNTIL logic_expr . DO complex_statement
   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr

    DO          shift, and go to state 73
    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59


State 35

    9 simple_statement: CHECK logic_expr . DO complex_statement
   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr

    DO          shift, and go to state 74
    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59


State 36

   31 numeric_operand: expr .
   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   51 logic_expr: expr .

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    VAR_NAME    reduce using rule 31 (numeric_operand)
    VAR_NAME    [reduce using rule 51 (logic_expr)]
    LITERAL     reduce using rule 31 (numeric_operand)
    LITERAL     [reduce using rule 51 (logic_expr)]
    SONAR       reduce using rule 31 (numeric_operand)
    SONAR       [reduce using rule 51 (logic_expr)]
    '+'         [reduce using rule 31 (numeric_operand)]
    '+'         [reduce using rule 51 (logic_expr)]
    '-'         [reduce using rule 31 (numeric_operand)]
    '-'         [reduce using rule 51 (logic_expr)]
    LESS_EQUAL  reduce using rule 51 (logic_expr)
    MORE_EQUAL  reduce using rule 51 (logic_expr)
    ','         reduce using rule 31 (numeric_operand)
    ','         [reduce using rule 51 (logic_expr)]
    ']'         reduce using rule 31 (numeric_operand)
    ']'         [reduce using rule 51 (logic_expr)]
    '('         reduce using rule 31 (numeric_operand)
    '('         [reduce using rule 51 (logic_expr)]
    ')'         reduce using rule 31 (numeric_operand)
    ')'         [reduce using rule 51 (logic_expr)]
    '<'         reduce using rule 51 (logic_expr)
    '>'         reduce using rule 51 (logic_expr)
    $default    reduce using rule 31 (numeric_operand)


State 37

   11 simple_statement: RETURN operand . ','

    ','  shift, and go to state 75


State 38

   12 simple_statement: GO ',' .

    $default  reduce using rule 12 (simple_statement)


State 39

   14 simple_statement: RL ',' .

    $default  reduce using rule 14 (simple_statement)


State 40

   13 simple_statement: RR ',' .

    $default  reduce using rule 13 (simple_statement)


State 41

   39 expr: '+' expr_operand .

    $default  reduce using rule 39 (expr)


State 42

   30 numeric_operand: '-' LITERAL .
   33 expr_operand: LITERAL .

    VAR_NAME      reduce using rule 30 (numeric_operand)
    VAR_NAME      [reduce using rule 33 (expr_operand)]
    LITERAL       reduce using rule 30 (numeric_operand)
    LITERAL       [reduce using rule 33 (expr_operand)]
    SONAR         reduce using rule 30 (numeric_operand)
    SONAR         [reduce using rule 33 (expr_operand)]
    '+'           reduce using rule 30 (numeric_operand)
    '+'           [reduce using rule 33 (expr_operand)]
    '-'           reduce using rule 30 (numeric_operand)
    '-'           [reduce using rule 33 (expr_operand)]
    '*'           reduce using rule 33 (expr_operand)
    '/'           reduce using rule 33 (expr_operand)
    LESS_EQUAL    reduce using rule 33 (expr_operand)
    MORE_EQUAL    reduce using rule 33 (expr_operand)
    LEFT_ASSIGN   reduce using rule 30 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 33 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 30 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 33 (expr_operand)]
    ','           reduce using rule 30 (numeric_operand)
    ','           [reduce using rule 33 (expr_operand)]
    ']'           reduce using rule 30 (numeric_operand)
    ']'           [reduce using rule 33 (expr_operand)]
    '('           reduce using rule 30 (numeric_operand)
    '('           [reduce using rule 33 (expr_operand)]
    ')'           reduce using rule 30 (numeric_operand)
    ')'           [reduce using rule 33 (expr_operand)]
    '<'           reduce using rule 33 (expr_operand)
    '>'           reduce using rule 33 (expr_operand)
    $default      reduce using rule 30 (numeric_operand)


State 43

   40 expr: '-' expr_operand .

    $default  reduce using rule 40 (expr)


State 44

    7 simple_statement: '@' operand . ','

    ','  shift, and go to state 76


State 45

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   45     | '(' expr . ')'
   51 logic_expr: expr .

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53
    ')'  shift, and go to state 77

    ')'       [reduce using rule 51 (logic_expr)]
    $default  reduce using rule 51 (logic_expr)


State 46

   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr
   50           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    ')'         shift, and go to state 78
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59


State 47

    0 $accept: main $end .

    $default  accept


State 48

    3 complex_statement: simple_statement '.' .

    $default  reduce using rule 3 (complex_statement)


State 49

    2 complex_statement: simple_statement complex_statement .

    $default  reduce using rule 2 (complex_statement)


State 50

   43 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 80
    expr_operand  go to state 23


State 51

   44 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 81
    expr_operand  go to state 23


State 52

   41 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 82
    expr_operand  go to state 23


State 53

   42 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 83
    expr_operand  go to state 23


State 54

   19 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 19
    operand          go to state 20
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23
    assign_expr      go to state 84


State 55

   20 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 19
    operand          go to state 20
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23
    assign_expr      go to state 85


State 56

   46 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 86
    expr_operand  go to state 23


State 57

   47 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 87
    expr_operand  go to state 23


State 58

   48 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 88
    expr_operand  go to state 23


State 59

   49 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 15

    expr          go to state 33
    logic_expr    go to state 89
    expr_operand  go to state 23


State 60

    6 simple_statement: assign_expr ',' .

    $default  reduce using rule 6 (simple_statement)


State 61

   26 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   29 numeric_operand: LITERAL .
   33 expr_operand: LITERAL .
   36             | VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 90

    VAR_NAME  reduce using rule 29 (numeric_operand)
    VAR_NAME  [reduce using rule 33 (expr_operand)]
    LITERAL   [reduce using rule 29 (numeric_operand)]
    LITERAL   [reduce using rule 33 (expr_operand)]
    '+'       reduce using rule 29 (numeric_operand)
    '+'       [reduce using rule 33 (expr_operand)]
    '-'       reduce using rule 29 (numeric_operand)
    '-'       [reduce using rule 33 (expr_operand)]
    '('       reduce using rule 29 (numeric_operand)
    '('       [reduce using rule 33 (expr_operand)]
    $default  reduce using rule 33 (expr_operand)


State 62

   25 operand: VAR_NAME '[' numeric_operand . numeric_operand ']'
   35 expr_operand: VAR_NAME '[' numeric_operand . numeric_operand ']'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    numeric_operand  go to state 91
    logic_expr       go to state 22
    expr_operand     go to state 23


State 63

   15 args_to_call: operand . args_to_call
   16             | operand .

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    $default  reduce using rule 16 (args_to_call)

    expr             go to state 36
    operand          go to state 63
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23
    args_to_call     go to state 92


State 64

   27 operand: VAR_NAME '(' args_to_call . ')'
   37 expr_operand: VAR_NAME '(' args_to_call . ')'

    ')'  shift, and go to state 93


State 65

   52 vars: VAR_NAME . vars
   53     | VAR_NAME .

    VAR_NAME  shift, and go to state 65

    LEFT_ASSIGN  reduce using rule 53 (vars)
    LEFT_ASSIGN  [reduce using rule 54 (vars)]
    $default     reduce using rule 53 (vars)

    vars  go to state 68


State 66

   17 args: VAR_TYPE . VAR_NAME args
   18     | VAR_TYPE . VAR_NAME

    VAR_NAME  shift, and go to state 94


State 67

   10 simple_statement: VAR_TYPE VAR_NAME args . BEGIN_FUNC complex_statement END_FUNC ','

    BEGIN_FUNC  shift, and go to state 95


State 68

   52 vars: VAR_NAME vars .

    $default  reduce using rule 52 (vars)


State 69

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN . expr ','

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 96
    expr_operand  go to state 23


State 70

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 65

    $default  reduce using rule 54 (vars)

    vars  go to state 97


State 71

   35 expr_operand: VAR_NAME '[' . numeric_operand numeric_operand ']'
   36             | VAR_NAME '[' . LITERAL LITERAL ']'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 98
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    numeric_operand  go to state 99
    logic_expr       go to state 22
    expr_operand     go to state 23


State 72

   37 expr_operand: VAR_NAME '(' . args_to_call ')'

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    operand          go to state 63
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23
    args_to_call     go to state 100


State 73

    8 simple_statement: UNTIL logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    GO        shift, and go to state 8
    RL        shift, and go to state 9
    RR        shift, and go to state 10
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '@'       shift, and go to state 14
    '('       shift, and go to state 15

    complex_statement  go to state 101
    simple_statement   go to state 18
    expr               go to state 19
    operand            go to state 20
    numeric_operand    go to state 21
    logic_expr         go to state 22
    expr_operand       go to state 23
    assign_expr        go to state 24


State 74

    9 simple_statement: CHECK logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    GO        shift, and go to state 8
    RL        shift, and go to state 9
    RR        shift, and go to state 10
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '@'       shift, and go to state 14
    '('       shift, and go to state 15

    complex_statement  go to state 102
    simple_statement   go to state 18
    expr               go to state 19
    operand            go to state 20
    numeric_operand    go to state 21
    logic_expr         go to state 22
    expr_operand       go to state 23
    assign_expr        go to state 24


State 75

   11 simple_statement: RETURN operand ',' .

    $default  reduce using rule 11 (simple_statement)


State 76

    7 simple_statement: '@' operand ',' .

    $default  reduce using rule 7 (simple_statement)


State 77

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 78

   50 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 50 (logic_expr)


State 79

   45 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 31
    '+'       shift, and go to state 12
    '-'       shift, and go to state 32
    '('       shift, and go to state 79

    expr          go to state 103
    expr_operand  go to state 23


State 80

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   43     | expr '+' expr .
   44     | expr . '-' expr

    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    $default  reduce using rule 43 (expr)


State 81

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   44     | expr '-' expr .

    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    $default  reduce using rule 44 (expr)


State 82

   41 expr: expr . '*' expr
   41     | expr '*' expr .
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr

    $default  reduce using rule 41 (expr)


State 83

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   42     | expr '/' expr .
   43     | expr . '+' expr
   44     | expr . '-' expr

    $default  reduce using rule 42 (expr)


State 84

   19 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 19 (assign_expr)


State 85

   20 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 20 (assign_expr)


State 86

   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   46           | logic_expr LESS_EQUAL logic_expr .
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 58
    '>'  shift, and go to state 59

    '<'       [reduce using rule 46 (logic_expr)]
    '>'       [reduce using rule 46 (logic_expr)]
    $default  reduce using rule 46 (logic_expr)


State 87

   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   47           | logic_expr MORE_EQUAL logic_expr .
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 58
    '>'  shift, and go to state 59

    '<'       [reduce using rule 47 (logic_expr)]
    '>'       [reduce using rule 47 (logic_expr)]
    $default  reduce using rule 47 (logic_expr)


State 88

   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   48           | logic_expr '<' logic_expr .
   49           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59

    LESS_EQUAL  [reduce using rule 48 (logic_expr)]
    MORE_EQUAL  [reduce using rule 48 (logic_expr)]
    '<'         [reduce using rule 48 (logic_expr)]
    '>'         [reduce using rule 48 (logic_expr)]
    $default    reduce using rule 48 (logic_expr)


State 89

   46 logic_expr: logic_expr . LESS_EQUAL logic_expr
   47           | logic_expr . MORE_EQUAL logic_expr
   48           | logic_expr . '<' logic_expr
   49           | logic_expr . '>' logic_expr
   49           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 56
    MORE_EQUAL  shift, and go to state 57
    '<'         shift, and go to state 58
    '>'         shift, and go to state 59

    LESS_EQUAL  [reduce using rule 49 (logic_expr)]
    MORE_EQUAL  [reduce using rule 49 (logic_expr)]
    '<'         [reduce using rule 49 (logic_expr)]
    '>'         [reduce using rule 49 (logic_expr)]
    $default    reduce using rule 49 (logic_expr)


State 90

   26 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   36 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 104


State 91

   25 operand: VAR_NAME '[' numeric_operand numeric_operand . ']'
   35 expr_operand: VAR_NAME '[' numeric_operand numeric_operand . ']'

    ']'  shift, and go to state 105


State 92

   15 args_to_call: operand args_to_call .

    $default  reduce using rule 15 (args_to_call)


State 93

   27 operand: VAR_NAME '(' args_to_call ')' .
   37 expr_operand: VAR_NAME '(' args_to_call ')' .

    VAR_NAME      reduce using rule 27 (operand)
    VAR_NAME      [reduce using rule 37 (expr_operand)]
    LITERAL       reduce using rule 27 (operand)
    LITERAL       [reduce using rule 37 (expr_operand)]
    SONAR         reduce using rule 27 (operand)
    SONAR         [reduce using rule 37 (expr_operand)]
    '+'           reduce using rule 27 (operand)
    '+'           [reduce using rule 37 (expr_operand)]
    '-'           reduce using rule 27 (operand)
    '-'           [reduce using rule 37 (expr_operand)]
    '*'           reduce using rule 37 (expr_operand)
    '/'           reduce using rule 37 (expr_operand)
    LESS_EQUAL    reduce using rule 37 (expr_operand)
    MORE_EQUAL    reduce using rule 37 (expr_operand)
    LEFT_ASSIGN   reduce using rule 27 (operand)
    LEFT_ASSIGN   [reduce using rule 37 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 27 (operand)
    RIGHT_ASSIGN  [reduce using rule 37 (expr_operand)]
    ','           reduce using rule 27 (operand)
    ','           [reduce using rule 37 (expr_operand)]
    '('           reduce using rule 27 (operand)
    '('           [reduce using rule 37 (expr_operand)]
    ')'           reduce using rule 27 (operand)
    ')'           [reduce using rule 37 (expr_operand)]
    '<'           reduce using rule 37 (expr_operand)
    '>'           reduce using rule 37 (expr_operand)
    $default      reduce using rule 27 (operand)


State 94

   17 args: VAR_TYPE VAR_NAME . args
   18     | VAR_TYPE VAR_NAME .

    VAR_TYPE  shift, and go to state 66

    $default  reduce using rule 18 (args)

    args  go to state 106


State 95

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC . complex_statement END_FUNC ','

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    GO        shift, and go to state 8
    RL        shift, and go to state 9
    RR        shift, and go to state 10
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '@'       shift, and go to state 14
    '('       shift, and go to state 15

    complex_statement  go to state 107
    simple_statement   go to state 18
    expr               go to state 19
    operand            go to state 20
    numeric_operand    go to state 21
    logic_expr         go to state 22
    expr_operand       go to state 23
    assign_expr        go to state 24


State 96

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN expr . ','
   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53
    ','  shift, and go to state 108


State 97

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 109


State 98

   29 numeric_operand: LITERAL .
   33 expr_operand: LITERAL .
   36             | VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 110

    VAR_NAME  reduce using rule 29 (numeric_operand)
    VAR_NAME  [reduce using rule 33 (expr_operand)]
    LITERAL   [reduce using rule 29 (numeric_operand)]
    LITERAL   [reduce using rule 33 (expr_operand)]
    '+'       reduce using rule 29 (numeric_operand)
    '+'       [reduce using rule 33 (expr_operand)]
    '-'       reduce using rule 29 (numeric_operand)
    '-'       [reduce using rule 33 (expr_operand)]
    '('       reduce using rule 29 (numeric_operand)
    '('       [reduce using rule 33 (expr_operand)]
    $default  reduce using rule 33 (expr_operand)


State 99

   35 expr_operand: VAR_NAME '[' numeric_operand . numeric_operand ']'

    VAR_NAME  shift, and go to state 30
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    numeric_operand  go to state 111
    logic_expr       go to state 22
    expr_operand     go to state 23


State 100

   37 expr_operand: VAR_NAME '(' args_to_call . ')'

    ')'  shift, and go to state 112


State 101

    8 simple_statement: UNTIL logic_expr DO complex_statement .

    $default  reduce using rule 8 (simple_statement)


State 102

    9 simple_statement: CHECK logic_expr DO complex_statement .

    $default  reduce using rule 9 (simple_statement)


State 103

   41 expr: expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '+' expr
   44     | expr . '-' expr
   45     | '(' expr . ')'

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53
    ')'  shift, and go to state 77


State 104

   26 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   36 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    VAR_NAME      reduce using rule 26 (operand)
    VAR_NAME      [reduce using rule 36 (expr_operand)]
    LITERAL       reduce using rule 26 (operand)
    LITERAL       [reduce using rule 36 (expr_operand)]
    SONAR         reduce using rule 26 (operand)
    SONAR         [reduce using rule 36 (expr_operand)]
    '+'           reduce using rule 26 (operand)
    '+'           [reduce using rule 36 (expr_operand)]
    '-'           reduce using rule 26 (operand)
    '-'           [reduce using rule 36 (expr_operand)]
    '*'           reduce using rule 36 (expr_operand)
    '/'           reduce using rule 36 (expr_operand)
    LESS_EQUAL    reduce using rule 36 (expr_operand)
    MORE_EQUAL    reduce using rule 36 (expr_operand)
    LEFT_ASSIGN   reduce using rule 26 (operand)
    LEFT_ASSIGN   [reduce using rule 36 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 26 (operand)
    RIGHT_ASSIGN  [reduce using rule 36 (expr_operand)]
    ','           reduce using rule 26 (operand)
    ','           [reduce using rule 36 (expr_operand)]
    '('           reduce using rule 26 (operand)
    '('           [reduce using rule 36 (expr_operand)]
    ')'           reduce using rule 26 (operand)
    ')'           [reduce using rule 36 (expr_operand)]
    '<'           reduce using rule 36 (expr_operand)
    '>'           reduce using rule 36 (expr_operand)
    $default      reduce using rule 26 (operand)


State 105

   25 operand: VAR_NAME '[' numeric_operand numeric_operand ']' .
   35 expr_operand: VAR_NAME '[' numeric_operand numeric_operand ']' .

    VAR_NAME      reduce using rule 25 (operand)
    VAR_NAME      [reduce using rule 35 (expr_operand)]
    LITERAL       reduce using rule 25 (operand)
    LITERAL       [reduce using rule 35 (expr_operand)]
    SONAR         reduce using rule 25 (operand)
    SONAR         [reduce using rule 35 (expr_operand)]
    '+'           reduce using rule 25 (operand)
    '+'           [reduce using rule 35 (expr_operand)]
    '-'           reduce using rule 25 (operand)
    '-'           [reduce using rule 35 (expr_operand)]
    '*'           reduce using rule 35 (expr_operand)
    '/'           reduce using rule 35 (expr_operand)
    LESS_EQUAL    reduce using rule 35 (expr_operand)
    MORE_EQUAL    reduce using rule 35 (expr_operand)
    LEFT_ASSIGN   reduce using rule 25 (operand)
    LEFT_ASSIGN   [reduce using rule 35 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 25 (operand)
    RIGHT_ASSIGN  [reduce using rule 35 (expr_operand)]
    ','           reduce using rule 25 (operand)
    ','           [reduce using rule 35 (expr_operand)]
    '('           reduce using rule 25 (operand)
    '('           [reduce using rule 35 (expr_operand)]
    ')'           reduce using rule 25 (operand)
    ')'           [reduce using rule 35 (expr_operand)]
    '<'           reduce using rule 35 (expr_operand)
    '>'           reduce using rule 35 (expr_operand)
    $default      reduce using rule 25 (operand)


State 106

   17 args: VAR_TYPE VAR_NAME args .

    $default  reduce using rule 17 (args)


State 107

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement . END_FUNC ','

    END_FUNC  shift, and go to state 113


State 108

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN expr ',' .

    $default  reduce using rule 4 (simple_statement)


State 109

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    SONAR     shift, and go to state 11
    '+'       shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr             go to state 36
    operand          go to state 114
    numeric_operand  go to state 21
    logic_expr       go to state 22
    expr_operand     go to state 23


State 110

   36 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 115


State 111

   35 expr_operand: VAR_NAME '[' numeric_operand numeric_operand . ']'

    ']'  shift, and go to state 116


State 112

   37 expr_operand: VAR_NAME '(' args_to_call ')' .

    $default  reduce using rule 37 (expr_operand)


State 113

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC . ','

    ','  shift, and go to state 117


State 114

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 118


State 115

   36 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 36 (expr_operand)


State 116

   35 expr_operand: VAR_NAME '[' numeric_operand numeric_operand ']' .

    $default  reduce using rule 35 (expr_operand)


State 117

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ',' .

    $default  reduce using rule 10 (simple_statement)


State 118

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 5 (simple_statement)
