Terminals unused in grammar

    "<"
    ">"


State 1 conflicts: 4 reduce/reduce
State 2 conflicts: 4 reduce/reduce
State 11 conflicts: 4 reduce/reduce
State 24 conflicts: 1 shift/reduce
State 39 conflicts: 1 reduce/reduce
State 48 conflicts: 2 shift/reduce
State 50 conflicts: 2 shift/reduce
State 51 conflicts: 4 shift/reduce
State 52 conflicts: 4 shift/reduce
State 66 conflicts: 4 reduce/reduce


Grammar

    0 $accept: complex_statement $end

    1 complex_statement: simple_statement ',' complex_statement
    2                  | simple_statement '.'

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand
    4                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME LEFT_ASSIGN operand
    5                 | assign_expr
    6                 | '@' operand
    7                 | '$' VAR_NAME '[' LITERAL LITERAL ']'
    8                 | '$' VAR_NAME

    9 assign_expr: operand LEFT_ASSIGN assign_expr
   10            | operand RIGHT_ASSIGN assign_expr
   11            | operand

   12 operand: numeric_operand
   13        | VAR_NAME
   14        | VAR_NAME '[' LITERAL LITERAL ']'

   15 numeric_operand: LITERAL
   16                | expr
   17                | logic_expr

   18 expr_operand: LITERAL
   19             | VAR_NAME
   20             | VAR_NAME '[' LITERAL LITERAL ']'

   21 expr: expr_operand
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '+' expr
   25     | expr '-' expr
   26     | '(' expr ')'

   27 logic_expr: logic_expr LESS_EQUAL logic_expr
   28           | logic_expr MORE_EQUAL logic_expr
   29           | logic_expr '<' logic_expr
   30           | logic_expr '>' logic_expr
   31           | '(' logic_expr ')'
   32           | expr

   33 vars: VAR_NAME vars
   34     | VAR_NAME
   35     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 7 8
    '(' (40) 26 31
    ')' (41) 26 31
    '*' (42) 22
    '+' (43) 24
    ',' (44) 1
    '-' (45) 25
    '.' (46) 2
    '/' (47) 23
    '<' (60) 29
    '>' (62) 30
    '@' (64) 6
    '[' (91) 7 14 20
    ']' (93) 7 14 20
    error (256)
    VAR_NAME <str> (258) 3 4 7 8 13 14 19 20 33 34
    LITERAL <num> (259) 7 14 15 18 20
    VAR_TYPE <var_type> (260) 3 4
    ARRAY (261) 4
    LESS_EQUAL (262) 27
    MORE_EQUAL (263) 28
    "<" (264)
    ">" (265)
    LEFT_ASSIGN (266) 3 4 9
    RIGHT_ASSIGN (267) 10


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    operand <num> (28)
        on left: 12 13 14
        on right: 3 4 6 9 10 11
    numeric_operand <num> (29)
        on left: 15 16 17
        on right: 12
    logic_expr <num> (30)
        on left: 27 28 29 30 31 32
        on right: 17 27 28 29 30 31
    expr <num> (31)
        on left: 21 22 23 24 25 26
        on right: 16 22 23 24 25 26 32
    expr_operand <num> (32)
        on left: 18 19 20
        on right: 21
    complex_statement (33)
        on left: 1 2
        on right: 0 1
    simple_statement (34)
        on left: 3 4 5 6 7 8
        on right: 1 2
    assign_expr (35)
        on left: 9 10 11
        on right: 5 9 10
    vars (36)
        on left: 33 34 35
        on right: 3 33


State 0

    0 $accept: . complex_statement $end

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    VAR_TYPE  shift, and go to state 3
    ARRAY     shift, and go to state 4
    '@'       shift, and go to state 5
    '$'       shift, and go to state 6
    '('       shift, and go to state 7

    operand            go to state 8
    numeric_operand    go to state 9
    logic_expr         go to state 10
    expr               go to state 11
    expr_operand       go to state 12
    complex_statement  go to state 13
    simple_statement   go to state 14
    assign_expr        go to state 15


State 1

   13 operand: VAR_NAME .
   14        | VAR_NAME . '[' LITERAL LITERAL ']'
   19 expr_operand: VAR_NAME .
   20             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 16

    LEFT_ASSIGN   reduce using rule 13 (operand)
    LEFT_ASSIGN   [reduce using rule 19 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 13 (operand)
    RIGHT_ASSIGN  [reduce using rule 19 (expr_operand)]
    ','           reduce using rule 13 (operand)
    ','           [reduce using rule 19 (expr_operand)]
    '.'           reduce using rule 13 (operand)
    '.'           [reduce using rule 19 (expr_operand)]
    $default      reduce using rule 19 (expr_operand)


State 2

   15 numeric_operand: LITERAL .
   18 expr_operand: LITERAL .

    LEFT_ASSIGN   reduce using rule 15 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 18 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 15 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 18 (expr_operand)]
    ','           reduce using rule 15 (numeric_operand)
    ','           [reduce using rule 18 (expr_operand)]
    '.'           reduce using rule 15 (numeric_operand)
    '.'           [reduce using rule 18 (expr_operand)]
    $default      reduce using rule 18 (expr_operand)


State 3

    3 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 17


State 4

    4 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 18


State 5

    6 simple_statement: '@' . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    '('       shift, and go to state 7

    operand          go to state 19
    numeric_operand  go to state 9
    logic_expr       go to state 10
    expr             go to state 11
    expr_operand     go to state 12


State 6

    7 simple_statement: '$' . VAR_NAME '[' LITERAL LITERAL ']'
    8                 | '$' . VAR_NAME

    VAR_NAME  shift, and go to state 20


State 7

   26 expr: '(' . expr ')'
   31 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 7

    logic_expr    go to state 23
    expr          go to state 24
    expr_operand  go to state 12


State 8

    9 assign_expr: operand . LEFT_ASSIGN assign_expr
   10            | operand . RIGHT_ASSIGN assign_expr
   11            | operand .

    LEFT_ASSIGN   shift, and go to state 25
    RIGHT_ASSIGN  shift, and go to state 26

    $default  reduce using rule 11 (assign_expr)


State 9

   12 operand: numeric_operand .

    $default  reduce using rule 12 (operand)


State 10

   17 numeric_operand: logic_expr .
   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 27
    MORE_EQUAL  shift, and go to state 28
    '<'         shift, and go to state 29
    '>'         shift, and go to state 30

    $default  reduce using rule 17 (numeric_operand)


State 11

   16 numeric_operand: expr .
   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   32 logic_expr: expr .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    LESS_EQUAL    reduce using rule 32 (logic_expr)
    MORE_EQUAL    reduce using rule 32 (logic_expr)
    LEFT_ASSIGN   reduce using rule 16 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 32 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 16 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 32 (logic_expr)]
    ','           reduce using rule 16 (numeric_operand)
    ','           [reduce using rule 32 (logic_expr)]
    '.'           reduce using rule 16 (numeric_operand)
    '.'           [reduce using rule 32 (logic_expr)]
    '<'           reduce using rule 32 (logic_expr)
    '>'           reduce using rule 32 (logic_expr)
    $default      reduce using rule 16 (numeric_operand)


State 12

   21 expr: expr_operand .

    $default  reduce using rule 21 (expr)


State 13

    0 $accept: complex_statement . $end

    $end  shift, and go to state 35


State 14

    1 complex_statement: simple_statement . ',' complex_statement
    2                  | simple_statement . '.'

    ','  shift, and go to state 36
    '.'  shift, and go to state 37


State 15

    5 simple_statement: assign_expr .

    $default  reduce using rule 5 (simple_statement)


State 16

   14 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   20 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 38


State 17

    3 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 39

    $default  reduce using rule 35 (vars)

    vars  go to state 40


State 18

    4 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME LEFT_ASSIGN operand

    VAR_TYPE  shift, and go to state 41


State 19

    6 simple_statement: '@' operand .

    $default  reduce using rule 6 (simple_statement)


State 20

    7 simple_statement: '$' VAR_NAME . '[' LITERAL LITERAL ']'
    8                 | '$' VAR_NAME .

    '['  shift, and go to state 42

    $default  reduce using rule 8 (simple_statement)


State 21

   19 expr_operand: VAR_NAME .
   20             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 43

    $default  reduce using rule 19 (expr_operand)


State 22

   18 expr_operand: LITERAL .

    $default  reduce using rule 18 (expr_operand)


State 23

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr
   31           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 27
    MORE_EQUAL  shift, and go to state 28
    ')'         shift, and go to state 44
    '<'         shift, and go to state 29
    '>'         shift, and go to state 30


State 24

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   26     | '(' expr . ')'
   32 logic_expr: expr .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34
    ')'  shift, and go to state 45

    ')'       [reduce using rule 32 (logic_expr)]
    $default  reduce using rule 32 (logic_expr)


State 25

    9 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    '('       shift, and go to state 7

    operand          go to state 8
    numeric_operand  go to state 9
    logic_expr       go to state 10
    expr             go to state 11
    expr_operand     go to state 12
    assign_expr      go to state 46


State 26

   10 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    '('       shift, and go to state 7

    operand          go to state 8
    numeric_operand  go to state 9
    logic_expr       go to state 10
    expr             go to state 11
    expr_operand     go to state 12
    assign_expr      go to state 47


State 27

   27 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 7

    logic_expr    go to state 48
    expr          go to state 49
    expr_operand  go to state 12


State 28

   28 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 7

    logic_expr    go to state 50
    expr          go to state 49
    expr_operand  go to state 12


State 29

   29 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 7

    logic_expr    go to state 51
    expr          go to state 49
    expr_operand  go to state 12


State 30

   30 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 7

    logic_expr    go to state 52
    expr          go to state 49
    expr_operand  go to state 12


State 31

   24 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 53

    expr          go to state 54
    expr_operand  go to state 12


State 32

   25 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 53

    expr          go to state 55
    expr_operand  go to state 12


State 33

   22 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 53

    expr          go to state 56
    expr_operand  go to state 12


State 34

   23 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 53

    expr          go to state 57
    expr_operand  go to state 12


State 35

    0 $accept: complex_statement $end .

    $default  accept


State 36

    1 complex_statement: simple_statement ',' . complex_statement

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    VAR_TYPE  shift, and go to state 3
    ARRAY     shift, and go to state 4
    '@'       shift, and go to state 5
    '$'       shift, and go to state 6
    '('       shift, and go to state 7

    operand            go to state 8
    numeric_operand    go to state 9
    logic_expr         go to state 10
    expr               go to state 11
    expr_operand       go to state 12
    complex_statement  go to state 58
    simple_statement   go to state 14
    assign_expr        go to state 15


State 37

    2 complex_statement: simple_statement '.' .

    $default  reduce using rule 2 (complex_statement)


State 38

   14 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   20 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 59


State 39

   33 vars: VAR_NAME . vars
   34     | VAR_NAME .

    VAR_NAME  shift, and go to state 39

    LEFT_ASSIGN  reduce using rule 34 (vars)
    LEFT_ASSIGN  [reduce using rule 35 (vars)]
    $default     reduce using rule 34 (vars)

    vars  go to state 60


State 40

    3 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 61


State 41

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME LEFT_ASSIGN operand

    VAR_NAME  shift, and go to state 62


State 42

    7 simple_statement: '$' VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 63


State 43

   20 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 64


State 44

   31 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 31 (logic_expr)


State 45

   26 expr: '(' expr ')' .

    $default  reduce using rule 26 (expr)


State 46

    9 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 9 (assign_expr)


State 47

   10 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 10 (assign_expr)


State 48

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   27           | logic_expr LESS_EQUAL logic_expr .
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 29
    '>'  shift, and go to state 30

    '<'       [reduce using rule 27 (logic_expr)]
    '>'       [reduce using rule 27 (logic_expr)]
    $default  reduce using rule 27 (logic_expr)


State 49

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   32 logic_expr: expr .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 32 (logic_expr)


State 50

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   28           | logic_expr MORE_EQUAL logic_expr .
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 29
    '>'  shift, and go to state 30

    '<'       [reduce using rule 28 (logic_expr)]
    '>'       [reduce using rule 28 (logic_expr)]
    $default  reduce using rule 28 (logic_expr)


State 51

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   29           | logic_expr '<' logic_expr .
   30           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 27
    MORE_EQUAL  shift, and go to state 28
    '<'         shift, and go to state 29
    '>'         shift, and go to state 30

    LESS_EQUAL  [reduce using rule 29 (logic_expr)]
    MORE_EQUAL  [reduce using rule 29 (logic_expr)]
    '<'         [reduce using rule 29 (logic_expr)]
    '>'         [reduce using rule 29 (logic_expr)]
    $default    reduce using rule 29 (logic_expr)


State 52

   27 logic_expr: logic_expr . LESS_EQUAL logic_expr
   28           | logic_expr . MORE_EQUAL logic_expr
   29           | logic_expr . '<' logic_expr
   30           | logic_expr . '>' logic_expr
   30           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 27
    MORE_EQUAL  shift, and go to state 28
    '<'         shift, and go to state 29
    '>'         shift, and go to state 30

    LESS_EQUAL  [reduce using rule 30 (logic_expr)]
    MORE_EQUAL  [reduce using rule 30 (logic_expr)]
    '<'         [reduce using rule 30 (logic_expr)]
    '>'         [reduce using rule 30 (logic_expr)]
    $default    reduce using rule 30 (logic_expr)


State 53

   26 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 21
    LITERAL   shift, and go to state 22
    '('       shift, and go to state 53

    expr          go to state 65
    expr_operand  go to state 12


State 54

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   24     | expr '+' expr .
   25     | expr . '-' expr

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 24 (expr)


State 55

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   25     | expr '-' expr .

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 25 (expr)


State 56

   22 expr: expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr

    $default  reduce using rule 22 (expr)


State 57

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '+' expr
   25     | expr . '-' expr

    $default  reduce using rule 23 (expr)


State 58

    1 complex_statement: simple_statement ',' complex_statement .

    $default  reduce using rule 1 (complex_statement)


State 59

   14 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   20 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 66


State 60

   33 vars: VAR_NAME vars .

    $default  reduce using rule 33 (vars)


State 61

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    '('       shift, and go to state 7

    operand          go to state 67
    numeric_operand  go to state 9
    logic_expr       go to state 10
    expr             go to state 11
    expr_operand     go to state 12


State 62

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . LEFT_ASSIGN operand

    LEFT_ASSIGN  shift, and go to state 68


State 63

    7 simple_statement: '$' VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 69


State 64

   20 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 70


State 65

   22 expr: expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '+' expr
   25     | expr . '-' expr
   26     | '(' expr . ')'

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34
    ')'  shift, and go to state 45


State 66

   14 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   20 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    LEFT_ASSIGN   reduce using rule 14 (operand)
    LEFT_ASSIGN   [reduce using rule 20 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 14 (operand)
    RIGHT_ASSIGN  [reduce using rule 20 (expr_operand)]
    ','           reduce using rule 14 (operand)
    ','           [reduce using rule 20 (expr_operand)]
    '.'           reduce using rule 14 (operand)
    '.'           [reduce using rule 20 (expr_operand)]
    $default      reduce using rule 20 (expr_operand)


State 67

    3 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand .

    $default  reduce using rule 3 (simple_statement)


State 68

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME LEFT_ASSIGN . operand

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 2
    '('       shift, and go to state 7

    operand          go to state 71
    numeric_operand  go to state 9
    logic_expr       go to state 10
    expr             go to state 11
    expr_operand     go to state 12


State 69

    7 simple_statement: '$' VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 72


State 70

   20 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 73


State 71

    4 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME LEFT_ASSIGN operand .

    $default  reduce using rule 4 (simple_statement)


State 72

    7 simple_statement: '$' VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 7 (simple_statement)


State 73

   20 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 20 (expr_operand)
