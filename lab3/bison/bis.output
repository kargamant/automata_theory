Terminals unused in grammar

    "<"
    ">"


State 1 conflicts: 3 reduce/reduce
State 3 conflicts: 3 reduce/reduce
State 17 conflicts: 3 reduce/reduce
State 31 conflicts: 1 shift/reduce
State 33 conflicts: 10 reduce/reduce
State 47 conflicts: 1 reduce/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 59 conflicts: 4 shift/reduce
State 60 conflicts: 4 shift/reduce
State 73 conflicts: 3 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: complex_statement

    2 complex_statement: simple_statement complex_statement
    3                  | simple_statement '.'

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    5                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    6                 | assign_expr ','
    7                 | '@' operand ','
    8                 | '.'
    9                 | UNTIL logic_expr DO complex_statement

   10 assign_expr: operand LEFT_ASSIGN assign_expr
   11            | operand RIGHT_ASSIGN assign_expr
   12            | operand

   13 operand: numeric_operand
   14        | VAR_NAME
   15        | VAR_NAME '[' LITERAL LITERAL ']'

   16 numeric_operand: LITERAL
   17                | expr
   18                | logic_expr

   19 expr_operand: LITERAL
   20             | VAR_NAME
   21             | VAR_NAME '[' LITERAL LITERAL ']'

   22 expr: expr_operand
   23     | '+' expr_operand
   24     | '-' expr_operand
   25     | expr '*' expr
   26     | expr '/' expr
   27     | expr '+' expr
   28     | expr '-' expr
   29     | '(' expr ')'

   30 logic_expr: logic_expr LESS_EQUAL logic_expr
   31           | logic_expr MORE_EQUAL logic_expr
   32           | logic_expr '<' logic_expr
   33           | logic_expr '>' logic_expr
   34           | '(' logic_expr ')'
   35           | expr

   36 vars: VAR_NAME vars
   37     | VAR_NAME
   38     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 29 34
    ')' (41) 29 34
    '*' (42) 25
    '+' (43) 23 27
    ',' (44) 4 5 6 7
    '-' (45) 24 28
    '.' (46) 3 8
    '/' (47) 26
    '<' (60) 32
    '>' (62) 33
    '@' (64) 7
    '[' (91) 15 21
    ']' (93) 15 21
    error (256)
    VAR_NAME <str> (258) 4 5 14 15 20 21 36 37
    VAR_TYPE <var_type> (259) 4 5
    LITERAL <num> (260) 15 16 19 21
    ARRAY (261) 5
    UNTIL (262) 9
    DO (263) 9
    LESS_EQUAL (264) 30
    MORE_EQUAL (265) 31
    "<" (266)
    ">" (267)
    LEFT_ASSIGN (268) 4 5 10
    RIGHT_ASSIGN (269) 11


Nonterminals, with rules where they appear

    $accept (28)
        on left: 0
    main <st> (29)
        on left: 1
        on right: 0
    complex_statement <st> (30)
        on left: 2 3
        on right: 1 2 9
    simple_statement <st> (31)
        on left: 4 5 6 7 8 9
        on right: 2 3
    operand <st> (32)
        on left: 13 14 15
        on right: 4 5 7 10 11 12
    numeric_operand <st> (33)
        on left: 16 17 18
        on right: 13
    logic_expr <st> (34)
        on left: 30 31 32 33 34 35
        on right: 9 18 30 31 32 33 34
    expr <st> (35)
        on left: 22 23 24 25 26 27 28 29
        on right: 17 25 26 27 28 29 35
    expr_operand <st> (36)
        on left: 19 20 21
        on right: 22 23 24
    assign_expr (37)
        on left: 10 11 12
        on right: 6 10 11
    vars (38)
        on left: 36 37 38
        on right: 4 5 36


State 0

    0 $accept: . main $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '.'       shift, and go to state 8
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    main               go to state 11
    complex_statement  go to state 12
    simple_statement   go to state 13
    operand            go to state 14
    numeric_operand    go to state 15
    logic_expr         go to state 16
    expr               go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 1

   14 operand: VAR_NAME .
   15        | VAR_NAME . '[' LITERAL LITERAL ']'
   20 expr_operand: VAR_NAME .
   21             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 20

    LEFT_ASSIGN   reduce using rule 14 (operand)
    LEFT_ASSIGN   [reduce using rule 20 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 14 (operand)
    RIGHT_ASSIGN  [reduce using rule 20 (expr_operand)]
    ','           reduce using rule 14 (operand)
    ','           [reduce using rule 20 (expr_operand)]
    $default      reduce using rule 20 (expr_operand)


State 2

    4 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 21


State 3

   16 numeric_operand: LITERAL .
   19 expr_operand: LITERAL .

    LEFT_ASSIGN   reduce using rule 16 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 19 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 16 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 19 (expr_operand)]
    ','           reduce using rule 16 (numeric_operand)
    ','           [reduce using rule 19 (expr_operand)]
    $default      reduce using rule 19 (expr_operand)


State 4

    5 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 22


State 5

    9 simple_statement: UNTIL . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 25
    expr          go to state 26
    expr_operand  go to state 18


State 6

   23 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24

    expr_operand  go to state 27


State 7

   24 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24

    expr_operand  go to state 28


State 8

    8 simple_statement: '.' .

    $default  reduce using rule 8 (simple_statement)


State 9

    7 simple_statement: '@' . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    operand          go to state 29
    numeric_operand  go to state 15
    logic_expr       go to state 16
    expr             go to state 17
    expr_operand     go to state 18


State 10

   29 expr: '(' . expr ')'
   34 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 30
    expr          go to state 31
    expr_operand  go to state 18


State 11

    0 $accept: main . $end

    $end  shift, and go to state 32


State 12

    1 main: complex_statement .

    $default  reduce using rule 1 (main)


State 13

    2 complex_statement: simple_statement . complex_statement
    3                  | simple_statement . '.'

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '.'       shift, and go to state 33
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    complex_statement  go to state 34
    simple_statement   go to state 13
    operand            go to state 14
    numeric_operand    go to state 15
    logic_expr         go to state 16
    expr               go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 14

   10 assign_expr: operand . LEFT_ASSIGN assign_expr
   11            | operand . RIGHT_ASSIGN assign_expr
   12            | operand .

    LEFT_ASSIGN   shift, and go to state 35
    RIGHT_ASSIGN  shift, and go to state 36

    $default  reduce using rule 12 (assign_expr)


State 15

   13 operand: numeric_operand .

    $default  reduce using rule 13 (operand)


State 16

   18 numeric_operand: logic_expr .
   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 37
    MORE_EQUAL  shift, and go to state 38
    '<'         shift, and go to state 39
    '>'         shift, and go to state 40

    $default  reduce using rule 18 (numeric_operand)


State 17

   17 numeric_operand: expr .
   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   35 logic_expr: expr .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    LEFT_ASSIGN   reduce using rule 17 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 35 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 17 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 35 (logic_expr)]
    ','           reduce using rule 17 (numeric_operand)
    ','           [reduce using rule 35 (logic_expr)]
    $default      reduce using rule 35 (logic_expr)


State 18

   22 expr: expr_operand .

    $default  reduce using rule 22 (expr)


State 19

    6 simple_statement: assign_expr . ','

    ','  shift, and go to state 45


State 20

   15 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   21 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 46


State 21

    4 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 47

    $default  reduce using rule 38 (vars)

    vars  go to state 48


State 22

    5 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 49


State 23

   20 expr_operand: VAR_NAME .
   21             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 50

    $default  reduce using rule 20 (expr_operand)


State 24

   19 expr_operand: LITERAL .

    $default  reduce using rule 19 (expr_operand)


State 25

    9 simple_statement: UNTIL logic_expr . DO complex_statement
   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr

    DO          shift, and go to state 51
    LESS_EQUAL  shift, and go to state 37
    MORE_EQUAL  shift, and go to state 38
    '<'         shift, and go to state 39
    '>'         shift, and go to state 40


State 26

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   35 logic_expr: expr .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 35 (logic_expr)


State 27

   23 expr: '+' expr_operand .

    $default  reduce using rule 23 (expr)


State 28

   24 expr: '-' expr_operand .

    $default  reduce using rule 24 (expr)


State 29

    7 simple_statement: '@' operand . ','

    ','  shift, and go to state 52


State 30

   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr
   34           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 37
    MORE_EQUAL  shift, and go to state 38
    ')'         shift, and go to state 53
    '<'         shift, and go to state 39
    '>'         shift, and go to state 40


State 31

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | '(' expr . ')'
   35 logic_expr: expr .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    ')'  shift, and go to state 54

    ')'       [reduce using rule 35 (logic_expr)]
    $default  reduce using rule 35 (logic_expr)


State 32

    0 $accept: main $end .

    $default  accept


State 33

    3 complex_statement: simple_statement '.' .
    8 simple_statement: '.' .

    VAR_NAME  reduce using rule 3 (complex_statement)
    VAR_NAME  [reduce using rule 8 (simple_statement)]
    VAR_TYPE  reduce using rule 3 (complex_statement)
    VAR_TYPE  [reduce using rule 8 (simple_statement)]
    LITERAL   reduce using rule 3 (complex_statement)
    LITERAL   [reduce using rule 8 (simple_statement)]
    ARRAY     reduce using rule 3 (complex_statement)
    ARRAY     [reduce using rule 8 (simple_statement)]
    UNTIL     reduce using rule 3 (complex_statement)
    UNTIL     [reduce using rule 8 (simple_statement)]
    '+'       reduce using rule 3 (complex_statement)
    '+'       [reduce using rule 8 (simple_statement)]
    '-'       reduce using rule 3 (complex_statement)
    '-'       [reduce using rule 8 (simple_statement)]
    '.'       reduce using rule 3 (complex_statement)
    '.'       [reduce using rule 8 (simple_statement)]
    '@'       reduce using rule 3 (complex_statement)
    '@'       [reduce using rule 8 (simple_statement)]
    '('       reduce using rule 3 (complex_statement)
    '('       [reduce using rule 8 (simple_statement)]
    $default  reduce using rule 3 (complex_statement)


State 34

    2 complex_statement: simple_statement complex_statement .

    $default  reduce using rule 2 (complex_statement)


State 35

   10 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    operand          go to state 14
    numeric_operand  go to state 15
    logic_expr       go to state 16
    expr             go to state 17
    expr_operand     go to state 18
    assign_expr      go to state 55


State 36

   11 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    operand          go to state 14
    numeric_operand  go to state 15
    logic_expr       go to state 16
    expr             go to state 17
    expr_operand     go to state 18
    assign_expr      go to state 56


State 37

   30 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 57
    expr          go to state 26
    expr_operand  go to state 18


State 38

   31 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 58
    expr          go to state 26
    expr_operand  go to state 18


State 39

   32 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 59
    expr          go to state 26
    expr_operand  go to state 18


State 40

   33 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    logic_expr    go to state 60
    expr          go to state 26
    expr_operand  go to state 18


State 41

   27 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 61

    expr          go to state 62
    expr_operand  go to state 18


State 42

   28 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 61

    expr          go to state 63
    expr_operand  go to state 18


State 43

   25 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 61

    expr          go to state 64
    expr_operand  go to state 18


State 44

   26 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 61

    expr          go to state 65
    expr_operand  go to state 18


State 45

    6 simple_statement: assign_expr ',' .

    $default  reduce using rule 6 (simple_statement)


State 46

   15 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   21 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 66


State 47

   36 vars: VAR_NAME . vars
   37     | VAR_NAME .

    VAR_NAME  shift, and go to state 47

    LEFT_ASSIGN  reduce using rule 37 (vars)
    LEFT_ASSIGN  [reduce using rule 38 (vars)]
    $default     reduce using rule 37 (vars)

    vars  go to state 67


State 48

    4 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 68


State 49

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 69


State 50

   21 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 70


State 51

    9 simple_statement: UNTIL logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '.'       shift, and go to state 8
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    complex_statement  go to state 71
    simple_statement   go to state 13
    operand            go to state 14
    numeric_operand    go to state 15
    logic_expr         go to state 16
    expr               go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 52

    7 simple_statement: '@' operand ',' .

    $default  reduce using rule 7 (simple_statement)


State 53

   34 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 34 (logic_expr)


State 54

   29 expr: '(' expr ')' .

    $default  reduce using rule 29 (expr)


State 55

   10 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 10 (assign_expr)


State 56

   11 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 11 (assign_expr)


State 57

   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr LESS_EQUAL logic_expr .
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 39
    '>'  shift, and go to state 40

    '<'       [reduce using rule 30 (logic_expr)]
    '>'       [reduce using rule 30 (logic_expr)]
    $default  reduce using rule 30 (logic_expr)


State 58

   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr MORE_EQUAL logic_expr .
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 39
    '>'  shift, and go to state 40

    '<'       [reduce using rule 31 (logic_expr)]
    '>'       [reduce using rule 31 (logic_expr)]
    $default  reduce using rule 31 (logic_expr)


State 59

   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   32           | logic_expr '<' logic_expr .
   33           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 37
    MORE_EQUAL  shift, and go to state 38
    '<'         shift, and go to state 39
    '>'         shift, and go to state 40

    LESS_EQUAL  [reduce using rule 32 (logic_expr)]
    MORE_EQUAL  [reduce using rule 32 (logic_expr)]
    '<'         [reduce using rule 32 (logic_expr)]
    '>'         [reduce using rule 32 (logic_expr)]
    $default    reduce using rule 32 (logic_expr)


State 60

   30 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr . '<' logic_expr
   33           | logic_expr . '>' logic_expr
   33           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 37
    MORE_EQUAL  shift, and go to state 38
    '<'         shift, and go to state 39
    '>'         shift, and go to state 40

    LESS_EQUAL  [reduce using rule 33 (logic_expr)]
    MORE_EQUAL  [reduce using rule 33 (logic_expr)]
    '<'         [reduce using rule 33 (logic_expr)]
    '>'         [reduce using rule 33 (logic_expr)]
    $default    reduce using rule 33 (logic_expr)


State 61

   29 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 61

    expr          go to state 72
    expr_operand  go to state 18


State 62

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   27     | expr '+' expr .
   28     | expr . '-' expr

    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 27 (expr)


State 63

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   28     | expr '-' expr .

    '*'  shift, and go to state 43
    '/'  shift, and go to state 44

    $default  reduce using rule 28 (expr)


State 64

   25 expr: expr . '*' expr
   25     | expr '*' expr .
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr

    $default  reduce using rule 25 (expr)


State 65

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   26     | expr '/' expr .
   27     | expr . '+' expr
   28     | expr . '-' expr

    $default  reduce using rule 26 (expr)


State 66

   15 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   21 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 73


State 67

   36 vars: VAR_NAME vars .

    $default  reduce using rule 36 (vars)


State 68

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    operand          go to state 74
    numeric_operand  go to state 15
    logic_expr       go to state 16
    expr             go to state 17
    expr_operand     go to state 18


State 69

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 47

    $default  reduce using rule 38 (vars)

    vars  go to state 75


State 70

   21 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 76


State 71

    9 simple_statement: UNTIL logic_expr DO complex_statement .

    $default  reduce using rule 9 (simple_statement)


State 72

   25 expr: expr . '*' expr
   26     | expr . '/' expr
   27     | expr . '+' expr
   28     | expr . '-' expr
   29     | '(' expr . ')'

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    '/'  shift, and go to state 44
    ')'  shift, and go to state 54


State 73

   15 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   21 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    LEFT_ASSIGN   reduce using rule 15 (operand)
    LEFT_ASSIGN   [reduce using rule 21 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 15 (operand)
    RIGHT_ASSIGN  [reduce using rule 21 (expr_operand)]
    ','           reduce using rule 15 (operand)
    ','           [reduce using rule 21 (expr_operand)]
    $default      reduce using rule 21 (expr_operand)


State 74

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 77


State 75

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 78


State 76

   21 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 79


State 77

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 4 (simple_statement)


State 78

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 10

    operand          go to state 80
    numeric_operand  go to state 15
    logic_expr       go to state 16
    expr             go to state 17
    expr_operand     go to state 18


State 79

   21 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 21 (expr_operand)


State 80

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 81


State 81

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 5 (simple_statement)
