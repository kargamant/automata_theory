Terminals unused in grammar

    "<"
    ">"


State 1 conflicts: 1 shift/reduce, 9 reduce/reduce
State 3 conflicts: 9 reduce/reduce
State 15 conflicts: 2 shift/reduce, 9 reduce/reduce
State 23 conflicts: 1 reduce/reduce
State 26 conflicts: 1 shift/reduce
State 28 conflicts: 2 shift/reduce
State 35 conflicts: 1 shift/reduce
State 54 conflicts: 1 reduce/reduce
State 75 conflicts: 2 shift/reduce
State 76 conflicts: 2 shift/reduce
State 77 conflicts: 4 shift/reduce
State 78 conflicts: 4 shift/reduce
State 81 conflicts: 9 reduce/reduce
State 91 conflicts: 9 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: complex_statement

    2 complex_statement: simple_statement complex_statement
    3                  | simple_statement '.'

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN operand ','
    5                 | ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ','
    6                 | assign_expr ','
    7                 | '@' operand ','
    8                 | UNTIL logic_expr DO complex_statement
    9                 | CHECK logic_expr DO complex_statement
   10                 | VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ','
   11                 | RETURN operand ','

   12 args_to_call: operand args_to_call
   13             | operand

   14 args: VAR_TYPE VAR_NAME args
   15     | VAR_TYPE VAR_NAME

   16 assign_expr: operand LEFT_ASSIGN assign_expr
   17            | operand RIGHT_ASSIGN assign_expr
   18            | operand

   19 operand: numeric_operand
   20        | VAR_NAME
   21        | VAR_NAME '[' LITERAL LITERAL ']'
   22        | VAR_NAME '(' args_to_call ')'

   23 numeric_operand: LITERAL
   24                | expr
   25                | logic_expr

   26 expr_operand: LITERAL
   27             | VAR_NAME
   28             | VAR_NAME '[' LITERAL LITERAL ']'
   29             | VAR_NAME '(' args_to_call ')'

   30 expr: expr_operand
   31     | '+' expr_operand
   32     | '-' expr_operand
   33     | expr '*' expr
   34     | expr '/' expr
   35     | expr '+' expr
   36     | expr '-' expr
   37     | '(' expr ')'

   38 logic_expr: logic_expr LESS_EQUAL logic_expr
   39           | logic_expr MORE_EQUAL logic_expr
   40           | logic_expr '<' logic_expr
   41           | logic_expr '>' logic_expr
   42           | '(' logic_expr ')'
   43           | expr

   44 vars: VAR_NAME vars
   45     | VAR_NAME
   46     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 22 29 37 42
    ')' (41) 22 29 37 42
    '*' (42) 33
    '+' (43) 31 35
    ',' (44) 4 5 6 7 10 11
    '-' (45) 32 36
    '.' (46) 3
    '/' (47) 34
    '<' (60) 40
    '>' (62) 41
    '@' (64) 7
    '[' (91) 21 28
    ']' (93) 21 28
    error (256)
    VAR_NAME <str> (258) 10 14 15 20 21 22 27 28 29 44 45
    VAR_TYPE <var_type> (259) 4 5 10 14 15
    LITERAL <num> (260) 21 23 26 28
    ARRAY (261) 5
    UNTIL (262) 8
    DO (263) 8 9
    CHECK (264) 9
    BEGIN_FUNC (265) 10
    END_FUNC (266) 10
    RETURN (267) 11
    LESS_EQUAL (268) 38
    MORE_EQUAL (269) 39
    "<" (270)
    ">" (271)
    LEFT_ASSIGN (272) 4 5 16
    RIGHT_ASSIGN (273) 17


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    main <st> (33)
        on left: 1
        on right: 0
    complex_statement <st> (34)
        on left: 2 3
        on right: 1 2 8 9 10
    simple_statement <st> (35)
        on left: 4 5 6 7 8 9 10 11
        on right: 2 3
    args <st> (36)
        on left: 14 15
        on right: 10 14
    expr <st> (37)
        on left: 30 31 32 33 34 35 36 37
        on right: 24 33 34 35 36 37 43
    operand <st> (38)
        on left: 19 20 21 22
        on right: 4 5 7 11 12 13 16 17 18
    numeric_operand <st> (39)
        on left: 23 24 25
        on right: 19
    logic_expr <st> (40)
        on left: 38 39 40 41 42 43
        on right: 8 9 25 38 39 40 41 42
    expr_operand <st> (41)
        on left: 26 27 28 29
        on right: 30 31 32
    assign_expr <st> (42)
        on left: 16 17 18
        on right: 6 16 17
    args_to_call <st> (43)
        on left: 12 13
        on right: 12 22 29
    vars <st> (44)
        on left: 44 45 46
        on right: 4 5 44


State 0

    0 $accept: . main $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '@'       shift, and go to state 10
    '('       shift, and go to state 11

    main               go to state 12
    complex_statement  go to state 13
    simple_statement   go to state 14
    expr               go to state 15
    operand            go to state 16
    numeric_operand    go to state 17
    logic_expr         go to state 18
    expr_operand       go to state 19
    assign_expr        go to state 20


State 1

   20 operand: VAR_NAME .
   21        | VAR_NAME . '[' LITERAL LITERAL ']'
   22        | VAR_NAME . '(' args_to_call ')'
   27 expr_operand: VAR_NAME .
   28             | VAR_NAME . '[' LITERAL LITERAL ']'
   29             | VAR_NAME . '(' args_to_call ')'

    '['  shift, and go to state 21
    '('  shift, and go to state 22

    VAR_NAME      reduce using rule 20 (operand)
    VAR_NAME      [reduce using rule 27 (expr_operand)]
    LITERAL       reduce using rule 20 (operand)
    LITERAL       [reduce using rule 27 (expr_operand)]
    '+'           reduce using rule 20 (operand)
    '+'           [reduce using rule 27 (expr_operand)]
    '-'           reduce using rule 20 (operand)
    '-'           [reduce using rule 27 (expr_operand)]
    '*'           reduce using rule 27 (expr_operand)
    '/'           reduce using rule 27 (expr_operand)
    LESS_EQUAL    reduce using rule 27 (expr_operand)
    MORE_EQUAL    reduce using rule 27 (expr_operand)
    LEFT_ASSIGN   reduce using rule 20 (operand)
    LEFT_ASSIGN   [reduce using rule 27 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 20 (operand)
    RIGHT_ASSIGN  [reduce using rule 27 (expr_operand)]
    ','           reduce using rule 20 (operand)
    ','           [reduce using rule 27 (expr_operand)]
    '('           [reduce using rule 20 (operand)]
    '('           [reduce using rule 27 (expr_operand)]
    ')'           reduce using rule 20 (operand)
    ')'           [reduce using rule 27 (expr_operand)]
    '<'           reduce using rule 27 (expr_operand)
    '>'           reduce using rule 27 (expr_operand)
    $default      reduce using rule 20 (operand)


State 2

    4 simple_statement: VAR_TYPE . vars LEFT_ASSIGN operand ','
   10                 | VAR_TYPE . VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ','

    VAR_NAME  shift, and go to state 23

    $default  reduce using rule 46 (vars)

    vars  go to state 24


State 3

   23 numeric_operand: LITERAL .
   26 expr_operand: LITERAL .

    VAR_NAME      reduce using rule 23 (numeric_operand)
    VAR_NAME      [reduce using rule 26 (expr_operand)]
    LITERAL       reduce using rule 23 (numeric_operand)
    LITERAL       [reduce using rule 26 (expr_operand)]
    '+'           reduce using rule 23 (numeric_operand)
    '+'           [reduce using rule 26 (expr_operand)]
    '-'           reduce using rule 23 (numeric_operand)
    '-'           [reduce using rule 26 (expr_operand)]
    '*'           reduce using rule 26 (expr_operand)
    '/'           reduce using rule 26 (expr_operand)
    LESS_EQUAL    reduce using rule 26 (expr_operand)
    MORE_EQUAL    reduce using rule 26 (expr_operand)
    LEFT_ASSIGN   reduce using rule 23 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 26 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 23 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 26 (expr_operand)]
    ','           reduce using rule 23 (numeric_operand)
    ','           [reduce using rule 26 (expr_operand)]
    '('           reduce using rule 23 (numeric_operand)
    '('           [reduce using rule 26 (expr_operand)]
    ')'           reduce using rule 23 (numeric_operand)
    ')'           [reduce using rule 26 (expr_operand)]
    '<'           reduce using rule 26 (expr_operand)
    '>'           reduce using rule 26 (expr_operand)
    $default      reduce using rule 23 (numeric_operand)


State 4

    5 simple_statement: ARRAY . VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 25


State 5

    8 simple_statement: UNTIL . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 29
    expr_operand  go to state 19


State 6

    9 simple_statement: CHECK . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 30
    expr_operand  go to state 19


State 7

   11 simple_statement: RETURN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 31
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19


State 8

   31 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27

    expr_operand  go to state 32


State 9

   32 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27

    expr_operand  go to state 33


State 10

    7 simple_statement: '@' . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 34
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19


State 11

   37 expr: '(' . expr ')'
   42 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 35
    logic_expr    go to state 36
    expr_operand  go to state 19


State 12

    0 $accept: main . $end

    $end  shift, and go to state 37


State 13

    1 main: complex_statement .

    $default  reduce using rule 1 (main)


State 14

    2 complex_statement: simple_statement . complex_statement
    3                  | simple_statement . '.'

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '.'       shift, and go to state 38
    '@'       shift, and go to state 10
    '('       shift, and go to state 11

    complex_statement  go to state 39
    simple_statement   go to state 14
    expr               go to state 15
    operand            go to state 16
    numeric_operand    go to state 17
    logic_expr         go to state 18
    expr_operand       go to state 19
    assign_expr        go to state 20


State 15

   24 numeric_operand: expr .
   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr
   43 logic_expr: expr .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    VAR_NAME      reduce using rule 24 (numeric_operand)
    VAR_NAME      [reduce using rule 43 (logic_expr)]
    LITERAL       reduce using rule 24 (numeric_operand)
    LITERAL       [reduce using rule 43 (logic_expr)]
    '+'           [reduce using rule 24 (numeric_operand)]
    '+'           [reduce using rule 43 (logic_expr)]
    '-'           [reduce using rule 24 (numeric_operand)]
    '-'           [reduce using rule 43 (logic_expr)]
    LESS_EQUAL    reduce using rule 43 (logic_expr)
    MORE_EQUAL    reduce using rule 43 (logic_expr)
    LEFT_ASSIGN   reduce using rule 24 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 43 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 24 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 43 (logic_expr)]
    ','           reduce using rule 24 (numeric_operand)
    ','           [reduce using rule 43 (logic_expr)]
    '('           reduce using rule 24 (numeric_operand)
    '('           [reduce using rule 43 (logic_expr)]
    ')'           reduce using rule 24 (numeric_operand)
    ')'           [reduce using rule 43 (logic_expr)]
    '<'           reduce using rule 43 (logic_expr)
    '>'           reduce using rule 43 (logic_expr)
    $default      reduce using rule 24 (numeric_operand)


State 16

   16 assign_expr: operand . LEFT_ASSIGN assign_expr
   17            | operand . RIGHT_ASSIGN assign_expr
   18            | operand .

    LEFT_ASSIGN   shift, and go to state 44
    RIGHT_ASSIGN  shift, and go to state 45

    $default  reduce using rule 18 (assign_expr)


State 17

   19 operand: numeric_operand .

    $default  reduce using rule 19 (operand)


State 18

   25 numeric_operand: logic_expr .
   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49

    $default  reduce using rule 25 (numeric_operand)


State 19

   30 expr: expr_operand .

    $default  reduce using rule 30 (expr)


State 20

    6 simple_statement: assign_expr . ','

    ','  shift, and go to state 50


State 21

   21 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   28 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 51


State 22

   22 operand: VAR_NAME '(' . args_to_call ')'
   29 expr_operand: VAR_NAME '(' . args_to_call ')'

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 52
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19
    args_to_call     go to state 53


State 23

   10 simple_statement: VAR_TYPE VAR_NAME . args BEGIN_FUNC complex_statement END_FUNC ','
   44 vars: VAR_NAME . vars
   45     | VAR_NAME .

    VAR_NAME  shift, and go to state 54
    VAR_TYPE  shift, and go to state 55

    LEFT_ASSIGN  reduce using rule 45 (vars)
    LEFT_ASSIGN  [reduce using rule 46 (vars)]
    $default     reduce using rule 45 (vars)

    args  go to state 56
    vars  go to state 57


State 24

    4 simple_statement: VAR_TYPE vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 58


State 25

    5 simple_statement: ARRAY VAR_TYPE . VAR_TYPE vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 59


State 26

   27 expr_operand: VAR_NAME .
   28             | VAR_NAME . '[' LITERAL LITERAL ']'
   29             | VAR_NAME . '(' args_to_call ')'

    '['  shift, and go to state 60
    '('  shift, and go to state 61

    '('       [reduce using rule 27 (expr_operand)]
    $default  reduce using rule 27 (expr_operand)


State 27

   26 expr_operand: LITERAL .

    $default  reduce using rule 26 (expr_operand)


State 28

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr
   43 logic_expr: expr .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    '+'       [reduce using rule 43 (logic_expr)]
    '-'       [reduce using rule 43 (logic_expr)]
    $default  reduce using rule 43 (logic_expr)


State 29

    8 simple_statement: UNTIL logic_expr . DO complex_statement
   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr

    DO          shift, and go to state 62
    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49


State 30

    9 simple_statement: CHECK logic_expr . DO complex_statement
   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr

    DO          shift, and go to state 63
    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49


State 31

   11 simple_statement: RETURN operand . ','

    ','  shift, and go to state 64


State 32

   31 expr: '+' expr_operand .

    $default  reduce using rule 31 (expr)


State 33

   32 expr: '-' expr_operand .

    $default  reduce using rule 32 (expr)


State 34

    7 simple_statement: '@' operand . ','

    ','  shift, and go to state 65


State 35

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr
   37     | '(' expr . ')'
   43 logic_expr: expr .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ')'  shift, and go to state 66

    ')'       [reduce using rule 43 (logic_expr)]
    $default  reduce using rule 43 (logic_expr)


State 36

   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr
   42           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    ')'         shift, and go to state 67
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49


State 37

    0 $accept: main $end .

    $default  accept


State 38

    3 complex_statement: simple_statement '.' .

    $default  reduce using rule 3 (complex_statement)


State 39

    2 complex_statement: simple_statement complex_statement .

    $default  reduce using rule 2 (complex_statement)


State 40

   35 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 68

    expr          go to state 69
    expr_operand  go to state 19


State 41

   36 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 68

    expr          go to state 70
    expr_operand  go to state 19


State 42

   33 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 68

    expr          go to state 71
    expr_operand  go to state 19


State 43

   34 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 68

    expr          go to state 72
    expr_operand  go to state 19


State 44

   16 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 16
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19
    assign_expr      go to state 73


State 45

   17 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 16
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19
    assign_expr      go to state 74


State 46

   38 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 75
    expr_operand  go to state 19


State 47

   39 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 76
    expr_operand  go to state 19


State 48

   40 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 77
    expr_operand  go to state 19


State 49

   41 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr          go to state 28
    logic_expr    go to state 78
    expr_operand  go to state 19


State 50

    6 simple_statement: assign_expr ',' .

    $default  reduce using rule 6 (simple_statement)


State 51

   21 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   28 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 79


State 52

   12 args_to_call: operand . args_to_call
   13             | operand .

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    $default  reduce using rule 13 (args_to_call)

    expr             go to state 15
    operand          go to state 52
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19
    args_to_call     go to state 80


State 53

   22 operand: VAR_NAME '(' args_to_call . ')'
   29 expr_operand: VAR_NAME '(' args_to_call . ')'

    ')'  shift, and go to state 81


State 54

   44 vars: VAR_NAME . vars
   45     | VAR_NAME .

    VAR_NAME  shift, and go to state 54

    LEFT_ASSIGN  reduce using rule 45 (vars)
    LEFT_ASSIGN  [reduce using rule 46 (vars)]
    $default     reduce using rule 45 (vars)

    vars  go to state 57


State 55

   14 args: VAR_TYPE . VAR_NAME args
   15     | VAR_TYPE . VAR_NAME

    VAR_NAME  shift, and go to state 82


State 56

   10 simple_statement: VAR_TYPE VAR_NAME args . BEGIN_FUNC complex_statement END_FUNC ','

    BEGIN_FUNC  shift, and go to state 83


State 57

   44 vars: VAR_NAME vars .

    $default  reduce using rule 44 (vars)


State 58

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 84
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19


State 59

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 54

    $default  reduce using rule 46 (vars)

    vars  go to state 85


State 60

   28 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 86


State 61

   29 expr_operand: VAR_NAME '(' . args_to_call ')'

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 52
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19
    args_to_call     go to state 87


State 62

    8 simple_statement: UNTIL logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '@'       shift, and go to state 10
    '('       shift, and go to state 11

    complex_statement  go to state 88
    simple_statement   go to state 14
    expr               go to state 15
    operand            go to state 16
    numeric_operand    go to state 17
    logic_expr         go to state 18
    expr_operand       go to state 19
    assign_expr        go to state 20


State 63

    9 simple_statement: CHECK logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '@'       shift, and go to state 10
    '('       shift, and go to state 11

    complex_statement  go to state 89
    simple_statement   go to state 14
    expr               go to state 15
    operand            go to state 16
    numeric_operand    go to state 17
    logic_expr         go to state 18
    expr_operand       go to state 19
    assign_expr        go to state 20


State 64

   11 simple_statement: RETURN operand ',' .

    $default  reduce using rule 11 (simple_statement)


State 65

    7 simple_statement: '@' operand ',' .

    $default  reduce using rule 7 (simple_statement)


State 66

   37 expr: '(' expr ')' .

    $default  reduce using rule 37 (expr)


State 67

   42 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 42 (logic_expr)


State 68

   37 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 26
    LITERAL   shift, and go to state 27
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 68

    expr          go to state 90
    expr_operand  go to state 19


State 69

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   35     | expr '+' expr .
   36     | expr . '-' expr

    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    $default  reduce using rule 35 (expr)


State 70

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr
   36     | expr '-' expr .

    '*'  shift, and go to state 42
    '/'  shift, and go to state 43

    $default  reduce using rule 36 (expr)


State 71

   33 expr: expr . '*' expr
   33     | expr '*' expr .
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr

    $default  reduce using rule 33 (expr)


State 72

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   34     | expr '/' expr .
   35     | expr . '+' expr
   36     | expr . '-' expr

    $default  reduce using rule 34 (expr)


State 73

   16 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 16 (assign_expr)


State 74

   17 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 17 (assign_expr)


State 75

   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   38           | logic_expr LESS_EQUAL logic_expr .
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 48
    '>'  shift, and go to state 49

    '<'       [reduce using rule 38 (logic_expr)]
    '>'       [reduce using rule 38 (logic_expr)]
    $default  reduce using rule 38 (logic_expr)


State 76

   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   39           | logic_expr MORE_EQUAL logic_expr .
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 48
    '>'  shift, and go to state 49

    '<'       [reduce using rule 39 (logic_expr)]
    '>'       [reduce using rule 39 (logic_expr)]
    $default  reduce using rule 39 (logic_expr)


State 77

   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   40           | logic_expr '<' logic_expr .
   41           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49

    LESS_EQUAL  [reduce using rule 40 (logic_expr)]
    MORE_EQUAL  [reduce using rule 40 (logic_expr)]
    '<'         [reduce using rule 40 (logic_expr)]
    '>'         [reduce using rule 40 (logic_expr)]
    $default    reduce using rule 40 (logic_expr)


State 78

   38 logic_expr: logic_expr . LESS_EQUAL logic_expr
   39           | logic_expr . MORE_EQUAL logic_expr
   40           | logic_expr . '<' logic_expr
   41           | logic_expr . '>' logic_expr
   41           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 46
    MORE_EQUAL  shift, and go to state 47
    '<'         shift, and go to state 48
    '>'         shift, and go to state 49

    LESS_EQUAL  [reduce using rule 41 (logic_expr)]
    MORE_EQUAL  [reduce using rule 41 (logic_expr)]
    '<'         [reduce using rule 41 (logic_expr)]
    '>'         [reduce using rule 41 (logic_expr)]
    $default    reduce using rule 41 (logic_expr)


State 79

   21 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   28 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 91


State 80

   12 args_to_call: operand args_to_call .

    $default  reduce using rule 12 (args_to_call)


State 81

   22 operand: VAR_NAME '(' args_to_call ')' .
   29 expr_operand: VAR_NAME '(' args_to_call ')' .

    VAR_NAME      reduce using rule 22 (operand)
    VAR_NAME      [reduce using rule 29 (expr_operand)]
    LITERAL       reduce using rule 22 (operand)
    LITERAL       [reduce using rule 29 (expr_operand)]
    '+'           reduce using rule 22 (operand)
    '+'           [reduce using rule 29 (expr_operand)]
    '-'           reduce using rule 22 (operand)
    '-'           [reduce using rule 29 (expr_operand)]
    '*'           reduce using rule 29 (expr_operand)
    '/'           reduce using rule 29 (expr_operand)
    LESS_EQUAL    reduce using rule 29 (expr_operand)
    MORE_EQUAL    reduce using rule 29 (expr_operand)
    LEFT_ASSIGN   reduce using rule 22 (operand)
    LEFT_ASSIGN   [reduce using rule 29 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 22 (operand)
    RIGHT_ASSIGN  [reduce using rule 29 (expr_operand)]
    ','           reduce using rule 22 (operand)
    ','           [reduce using rule 29 (expr_operand)]
    '('           reduce using rule 22 (operand)
    '('           [reduce using rule 29 (expr_operand)]
    ')'           reduce using rule 22 (operand)
    ')'           [reduce using rule 29 (expr_operand)]
    '<'           reduce using rule 29 (expr_operand)
    '>'           reduce using rule 29 (expr_operand)
    $default      reduce using rule 22 (operand)


State 82

   14 args: VAR_TYPE VAR_NAME . args
   15     | VAR_TYPE VAR_NAME .

    VAR_TYPE  shift, and go to state 55

    $default  reduce using rule 15 (args)

    args  go to state 92


State 83

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC . complex_statement END_FUNC ','

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    RETURN    shift, and go to state 7
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '@'       shift, and go to state 10
    '('       shift, and go to state 11

    complex_statement  go to state 93
    simple_statement   go to state 14
    expr               go to state 15
    operand            go to state 16
    numeric_operand    go to state 17
    logic_expr         go to state 18
    expr_operand       go to state 19
    assign_expr        go to state 20


State 84

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 94


State 85

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 95


State 86

   28 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 96


State 87

   29 expr_operand: VAR_NAME '(' args_to_call . ')'

    ')'  shift, and go to state 97


State 88

    8 simple_statement: UNTIL logic_expr DO complex_statement .

    $default  reduce using rule 8 (simple_statement)


State 89

    9 simple_statement: CHECK logic_expr DO complex_statement .

    $default  reduce using rule 9 (simple_statement)


State 90

   33 expr: expr . '*' expr
   34     | expr . '/' expr
   35     | expr . '+' expr
   36     | expr . '-' expr
   37     | '(' expr . ')'

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    '/'  shift, and go to state 43
    ')'  shift, and go to state 66


State 91

   21 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   28 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    VAR_NAME      reduce using rule 21 (operand)
    VAR_NAME      [reduce using rule 28 (expr_operand)]
    LITERAL       reduce using rule 21 (operand)
    LITERAL       [reduce using rule 28 (expr_operand)]
    '+'           reduce using rule 21 (operand)
    '+'           [reduce using rule 28 (expr_operand)]
    '-'           reduce using rule 21 (operand)
    '-'           [reduce using rule 28 (expr_operand)]
    '*'           reduce using rule 28 (expr_operand)
    '/'           reduce using rule 28 (expr_operand)
    LESS_EQUAL    reduce using rule 28 (expr_operand)
    MORE_EQUAL    reduce using rule 28 (expr_operand)
    LEFT_ASSIGN   reduce using rule 21 (operand)
    LEFT_ASSIGN   [reduce using rule 28 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 21 (operand)
    RIGHT_ASSIGN  [reduce using rule 28 (expr_operand)]
    ','           reduce using rule 21 (operand)
    ','           [reduce using rule 28 (expr_operand)]
    '('           reduce using rule 21 (operand)
    '('           [reduce using rule 28 (expr_operand)]
    ')'           reduce using rule 21 (operand)
    ')'           [reduce using rule 28 (expr_operand)]
    '<'           reduce using rule 28 (expr_operand)
    '>'           reduce using rule 28 (expr_operand)
    $default      reduce using rule 21 (operand)


State 92

   14 args: VAR_TYPE VAR_NAME args .

    $default  reduce using rule 14 (args)


State 93

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement . END_FUNC ','

    END_FUNC  shift, and go to state 98


State 94

    4 simple_statement: VAR_TYPE vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 4 (simple_statement)


State 95

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 8
    '-'       shift, and go to state 9
    '('       shift, and go to state 11

    expr             go to state 15
    operand          go to state 99
    numeric_operand  go to state 17
    logic_expr       go to state 18
    expr_operand     go to state 19


State 96

   28 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 100


State 97

   29 expr_operand: VAR_NAME '(' args_to_call ')' .

    $default  reduce using rule 29 (expr_operand)


State 98

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC . ','

    ','  shift, and go to state 101


State 99

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 102


State 100

   28 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 28 (expr_operand)


State 101

   10 simple_statement: VAR_TYPE VAR_NAME args BEGIN_FUNC complex_statement END_FUNC ',' .

    $default  reduce using rule 10 (simple_statement)


State 102

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 5 (simple_statement)
