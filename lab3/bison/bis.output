Terminals unused in grammar

    "<"
    ">"


State 0 conflicts: 10 shift/reduce
State 1 conflicts: 3 reduce/reduce
State 3 conflicts: 3 reduce/reduce
State 13 conflicts: 11 shift/reduce
State 14 conflicts: 3 reduce/reduce
State 31 conflicts: 1 shift/reduce
State 48 conflicts: 1 reduce/reduce
State 52 conflicts: 10 shift/reduce
State 53 conflicts: 10 shift/reduce
State 64 conflicts: 2 shift/reduce
State 65 conflicts: 2 shift/reduce
State 66 conflicts: 4 shift/reduce
State 67 conflicts: 4 shift/reduce
State 76 conflicts: 3 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: complex_statement

    2 complex_statement: simple_statement complex_statement
    3                  | simple_statement '.'

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    5                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    6                 | assign_expr ','
    7                 | '@' operand ','
    8                 | %empty
    9                 | UNTIL logic_expr DO complex_statement
   10                 | CHECK logic_expr DO complex_statement

   11 assign_expr: operand LEFT_ASSIGN assign_expr
   12            | operand RIGHT_ASSIGN assign_expr
   13            | operand

   14 operand: numeric_operand
   15        | VAR_NAME
   16        | VAR_NAME '[' LITERAL LITERAL ']'

   17 numeric_operand: LITERAL
   18                | expr
   19                | logic_expr

   20 expr_operand: LITERAL
   21             | VAR_NAME
   22             | VAR_NAME '[' LITERAL LITERAL ']'

   23 expr: expr_operand
   24     | '+' expr_operand
   25     | '-' expr_operand
   26     | expr '*' expr
   27     | expr '/' expr
   28     | expr '+' expr
   29     | expr '-' expr
   30     | '(' expr ')'

   31 logic_expr: logic_expr LESS_EQUAL logic_expr
   32           | logic_expr MORE_EQUAL logic_expr
   33           | logic_expr '<' logic_expr
   34           | logic_expr '>' logic_expr
   35           | '(' logic_expr ')'
   36           | expr

   37 vars: VAR_NAME vars
   38     | VAR_NAME
   39     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 30 35
    ')' (41) 30 35
    '*' (42) 26
    '+' (43) 24 28
    ',' (44) 4 5 6 7
    '-' (45) 25 29
    '.' (46) 3
    '/' (47) 27
    '<' (60) 33
    '>' (62) 34
    '@' (64) 7
    '[' (91) 16 22
    ']' (93) 16 22
    error (256)
    VAR_NAME <str> (258) 4 5 15 16 21 22 37 38
    VAR_TYPE <var_type> (259) 4 5
    LITERAL <num> (260) 16 17 20 22
    ARRAY (261) 5
    UNTIL (262) 9
    DO (263) 9 10
    CHECK (264) 10
    LESS_EQUAL (265) 31
    MORE_EQUAL (266) 32
    "<" (267)
    ">" (268)
    LEFT_ASSIGN (269) 4 5 11
    RIGHT_ASSIGN (270) 12


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    main <st> (30)
        on left: 1
        on right: 0
    complex_statement <st> (31)
        on left: 2 3
        on right: 1 2 9 10
    simple_statement <st> (32)
        on left: 4 5 6 7 8 9 10
        on right: 2 3
    expr <st> (33)
        on left: 23 24 25 26 27 28 29 30
        on right: 18 26 27 28 29 30 36
    operand <st> (34)
        on left: 14 15 16
        on right: 4 5 7 11 12 13
    numeric_operand <st> (35)
        on left: 17 18 19
        on right: 14
    logic_expr <st> (36)
        on left: 31 32 33 34 35 36
        on right: 9 10 19 31 32 33 34 35
    expr_operand <st> (37)
        on left: 20 21 22
        on right: 23 24 25
    assign_expr <st> (38)
        on left: 11 12 13
        on right: 6 11 12
    vars (39)
        on left: 37 38 39
        on right: 4 5 37


State 0

    0 $accept: . main $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    VAR_NAME  [reduce using rule 8 (simple_statement)]
    VAR_TYPE  [reduce using rule 8 (simple_statement)]
    LITERAL   [reduce using rule 8 (simple_statement)]
    ARRAY     [reduce using rule 8 (simple_statement)]
    UNTIL     [reduce using rule 8 (simple_statement)]
    CHECK     [reduce using rule 8 (simple_statement)]
    '+'       [reduce using rule 8 (simple_statement)]
    '-'       [reduce using rule 8 (simple_statement)]
    '@'       [reduce using rule 8 (simple_statement)]
    '('       [reduce using rule 8 (simple_statement)]
    $default  reduce using rule 8 (simple_statement)

    main               go to state 11
    complex_statement  go to state 12
    simple_statement   go to state 13
    expr               go to state 14
    operand            go to state 15
    numeric_operand    go to state 16
    logic_expr         go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 1

   15 operand: VAR_NAME .
   16        | VAR_NAME . '[' LITERAL LITERAL ']'
   21 expr_operand: VAR_NAME .
   22             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 20

    LEFT_ASSIGN   reduce using rule 15 (operand)
    LEFT_ASSIGN   [reduce using rule 21 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 15 (operand)
    RIGHT_ASSIGN  [reduce using rule 21 (expr_operand)]
    ','           reduce using rule 15 (operand)
    ','           [reduce using rule 21 (expr_operand)]
    $default      reduce using rule 21 (expr_operand)


State 2

    4 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 21


State 3

   17 numeric_operand: LITERAL .
   20 expr_operand: LITERAL .

    LEFT_ASSIGN   reduce using rule 17 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 20 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 17 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 20 (expr_operand)]
    ','           reduce using rule 17 (numeric_operand)
    ','           [reduce using rule 20 (expr_operand)]
    $default      reduce using rule 20 (expr_operand)


State 4

    5 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 22


State 5

    9 simple_statement: UNTIL . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 26
    expr_operand  go to state 18


State 6

   10 simple_statement: CHECK . logic_expr DO complex_statement

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 27
    expr_operand  go to state 18


State 7

   24 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24

    expr_operand  go to state 28


State 8

   25 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24

    expr_operand  go to state 29


State 9

    7 simple_statement: '@' . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr             go to state 14
    operand          go to state 30
    numeric_operand  go to state 16
    logic_expr       go to state 17
    expr_operand     go to state 18


State 10

   30 expr: '(' . expr ')'
   35 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 31
    logic_expr    go to state 32
    expr_operand  go to state 18


State 11

    0 $accept: main . $end

    $end  shift, and go to state 33


State 12

    1 main: complex_statement .

    $default  reduce using rule 1 (main)


State 13

    2 complex_statement: simple_statement . complex_statement
    3                  | simple_statement . '.'

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '.'       shift, and go to state 34
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    VAR_NAME  [reduce using rule 8 (simple_statement)]
    VAR_TYPE  [reduce using rule 8 (simple_statement)]
    LITERAL   [reduce using rule 8 (simple_statement)]
    ARRAY     [reduce using rule 8 (simple_statement)]
    UNTIL     [reduce using rule 8 (simple_statement)]
    CHECK     [reduce using rule 8 (simple_statement)]
    '+'       [reduce using rule 8 (simple_statement)]
    '-'       [reduce using rule 8 (simple_statement)]
    '.'       [reduce using rule 8 (simple_statement)]
    '@'       [reduce using rule 8 (simple_statement)]
    '('       [reduce using rule 8 (simple_statement)]

    complex_statement  go to state 35
    simple_statement   go to state 13
    expr               go to state 14
    operand            go to state 15
    numeric_operand    go to state 16
    logic_expr         go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 14

   18 numeric_operand: expr .
   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   36 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    LEFT_ASSIGN   reduce using rule 18 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 36 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 18 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 36 (logic_expr)]
    ','           reduce using rule 18 (numeric_operand)
    ','           [reduce using rule 36 (logic_expr)]
    $default      reduce using rule 36 (logic_expr)


State 15

   11 assign_expr: operand . LEFT_ASSIGN assign_expr
   12            | operand . RIGHT_ASSIGN assign_expr
   13            | operand .

    LEFT_ASSIGN   shift, and go to state 40
    RIGHT_ASSIGN  shift, and go to state 41

    $default  reduce using rule 13 (assign_expr)


State 16

   14 operand: numeric_operand .

    $default  reduce using rule 14 (operand)


State 17

   19 numeric_operand: logic_expr .
   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45

    $default  reduce using rule 19 (numeric_operand)


State 18

   23 expr: expr_operand .

    $default  reduce using rule 23 (expr)


State 19

    6 simple_statement: assign_expr . ','

    ','  shift, and go to state 46


State 20

   16 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   22 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 47


State 21

    4 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 48

    $default  reduce using rule 39 (vars)

    vars  go to state 49


State 22

    5 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 50


State 23

   21 expr_operand: VAR_NAME .
   22             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 51

    $default  reduce using rule 21 (expr_operand)


State 24

   20 expr_operand: LITERAL .

    $default  reduce using rule 20 (expr_operand)


State 25

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   36 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 36 (logic_expr)


State 26

    9 simple_statement: UNTIL logic_expr . DO complex_statement
   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr

    DO          shift, and go to state 52
    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45


State 27

   10 simple_statement: CHECK logic_expr . DO complex_statement
   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr

    DO          shift, and go to state 53
    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45


State 28

   24 expr: '+' expr_operand .

    $default  reduce using rule 24 (expr)


State 29

   25 expr: '-' expr_operand .

    $default  reduce using rule 25 (expr)


State 30

    7 simple_statement: '@' operand . ','

    ','  shift, and go to state 54


State 31

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | '(' expr . ')'
   36 logic_expr: expr .

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    ')'  shift, and go to state 55

    ')'       [reduce using rule 36 (logic_expr)]
    $default  reduce using rule 36 (logic_expr)


State 32

   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr
   35           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    ')'         shift, and go to state 56
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45


State 33

    0 $accept: main $end .

    $default  accept


State 34

    3 complex_statement: simple_statement '.' .

    $default  reduce using rule 3 (complex_statement)


State 35

    2 complex_statement: simple_statement complex_statement .

    $default  reduce using rule 2 (complex_statement)


State 36

   28 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 57

    expr          go to state 58
    expr_operand  go to state 18


State 37

   29 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 57

    expr          go to state 59
    expr_operand  go to state 18


State 38

   26 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 57

    expr          go to state 60
    expr_operand  go to state 18


State 39

   27 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 57

    expr          go to state 61
    expr_operand  go to state 18


State 40

   11 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr             go to state 14
    operand          go to state 15
    numeric_operand  go to state 16
    logic_expr       go to state 17
    expr_operand     go to state 18
    assign_expr      go to state 62


State 41

   12 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr             go to state 14
    operand          go to state 15
    numeric_operand  go to state 16
    logic_expr       go to state 17
    expr_operand     go to state 18
    assign_expr      go to state 63


State 42

   31 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 64
    expr_operand  go to state 18


State 43

   32 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 65
    expr_operand  go to state 18


State 44

   33 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 66
    expr_operand  go to state 18


State 45

   34 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr          go to state 25
    logic_expr    go to state 67
    expr_operand  go to state 18


State 46

    6 simple_statement: assign_expr ',' .

    $default  reduce using rule 6 (simple_statement)


State 47

   16 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   22 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 68


State 48

   37 vars: VAR_NAME . vars
   38     | VAR_NAME .

    VAR_NAME  shift, and go to state 48

    LEFT_ASSIGN  reduce using rule 38 (vars)
    LEFT_ASSIGN  [reduce using rule 39 (vars)]
    $default     reduce using rule 38 (vars)

    vars  go to state 69


State 49

    4 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 70


State 50

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 71


State 51

   22 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 72


State 52

    9 simple_statement: UNTIL logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    VAR_NAME  [reduce using rule 8 (simple_statement)]
    VAR_TYPE  [reduce using rule 8 (simple_statement)]
    LITERAL   [reduce using rule 8 (simple_statement)]
    ARRAY     [reduce using rule 8 (simple_statement)]
    UNTIL     [reduce using rule 8 (simple_statement)]
    CHECK     [reduce using rule 8 (simple_statement)]
    '+'       [reduce using rule 8 (simple_statement)]
    '-'       [reduce using rule 8 (simple_statement)]
    '@'       [reduce using rule 8 (simple_statement)]
    '('       [reduce using rule 8 (simple_statement)]
    $default  reduce using rule 8 (simple_statement)

    complex_statement  go to state 73
    simple_statement   go to state 13
    expr               go to state 14
    operand            go to state 15
    numeric_operand    go to state 16
    logic_expr         go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 53

   10 simple_statement: CHECK logic_expr DO . complex_statement

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    UNTIL     shift, and go to state 5
    CHECK     shift, and go to state 6
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '@'       shift, and go to state 9
    '('       shift, and go to state 10

    VAR_NAME  [reduce using rule 8 (simple_statement)]
    VAR_TYPE  [reduce using rule 8 (simple_statement)]
    LITERAL   [reduce using rule 8 (simple_statement)]
    ARRAY     [reduce using rule 8 (simple_statement)]
    UNTIL     [reduce using rule 8 (simple_statement)]
    CHECK     [reduce using rule 8 (simple_statement)]
    '+'       [reduce using rule 8 (simple_statement)]
    '-'       [reduce using rule 8 (simple_statement)]
    '@'       [reduce using rule 8 (simple_statement)]
    '('       [reduce using rule 8 (simple_statement)]
    $default  reduce using rule 8 (simple_statement)

    complex_statement  go to state 74
    simple_statement   go to state 13
    expr               go to state 14
    operand            go to state 15
    numeric_operand    go to state 16
    logic_expr         go to state 17
    expr_operand       go to state 18
    assign_expr        go to state 19


State 54

    7 simple_statement: '@' operand ',' .

    $default  reduce using rule 7 (simple_statement)


State 55

   30 expr: '(' expr ')' .

    $default  reduce using rule 30 (expr)


State 56

   35 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 35 (logic_expr)


State 57

   30 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 23
    LITERAL   shift, and go to state 24
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 57

    expr          go to state 75
    expr_operand  go to state 18


State 58

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   28     | expr '+' expr .
   29     | expr . '-' expr

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 28 (expr)


State 59

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   29     | expr '-' expr .

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 29 (expr)


State 60

   26 expr: expr . '*' expr
   26     | expr '*' expr .
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr

    $default  reduce using rule 26 (expr)


State 61

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   27     | expr '/' expr .
   28     | expr . '+' expr
   29     | expr . '-' expr

    $default  reduce using rule 27 (expr)


State 62

   11 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 11 (assign_expr)


State 63

   12 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 12 (assign_expr)


State 64

   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   31           | logic_expr LESS_EQUAL logic_expr .
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 44
    '>'  shift, and go to state 45

    '<'       [reduce using rule 31 (logic_expr)]
    '>'       [reduce using rule 31 (logic_expr)]
    $default  reduce using rule 31 (logic_expr)


State 65

   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   32           | logic_expr MORE_EQUAL logic_expr .
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 44
    '>'  shift, and go to state 45

    '<'       [reduce using rule 32 (logic_expr)]
    '>'       [reduce using rule 32 (logic_expr)]
    $default  reduce using rule 32 (logic_expr)


State 66

   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   33           | logic_expr '<' logic_expr .
   34           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45

    LESS_EQUAL  [reduce using rule 33 (logic_expr)]
    MORE_EQUAL  [reduce using rule 33 (logic_expr)]
    '<'         [reduce using rule 33 (logic_expr)]
    '>'         [reduce using rule 33 (logic_expr)]
    $default    reduce using rule 33 (logic_expr)


State 67

   31 logic_expr: logic_expr . LESS_EQUAL logic_expr
   32           | logic_expr . MORE_EQUAL logic_expr
   33           | logic_expr . '<' logic_expr
   34           | logic_expr . '>' logic_expr
   34           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 42
    MORE_EQUAL  shift, and go to state 43
    '<'         shift, and go to state 44
    '>'         shift, and go to state 45

    LESS_EQUAL  [reduce using rule 34 (logic_expr)]
    MORE_EQUAL  [reduce using rule 34 (logic_expr)]
    '<'         [reduce using rule 34 (logic_expr)]
    '>'         [reduce using rule 34 (logic_expr)]
    $default    reduce using rule 34 (logic_expr)


State 68

   16 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   22 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 76


State 69

   37 vars: VAR_NAME vars .

    $default  reduce using rule 37 (vars)


State 70

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr             go to state 14
    operand          go to state 77
    numeric_operand  go to state 16
    logic_expr       go to state 17
    expr_operand     go to state 18


State 71

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 48

    $default  reduce using rule 39 (vars)

    vars  go to state 78


State 72

   22 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 79


State 73

    9 simple_statement: UNTIL logic_expr DO complex_statement .

    $default  reduce using rule 9 (simple_statement)


State 74

   10 simple_statement: CHECK logic_expr DO complex_statement .

    $default  reduce using rule 10 (simple_statement)


State 75

   26 expr: expr . '*' expr
   27     | expr . '/' expr
   28     | expr . '+' expr
   29     | expr . '-' expr
   30     | '(' expr . ')'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    ')'  shift, and go to state 55


State 76

   16 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   22 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    LEFT_ASSIGN   reduce using rule 16 (operand)
    LEFT_ASSIGN   [reduce using rule 22 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 16 (operand)
    RIGHT_ASSIGN  [reduce using rule 22 (expr_operand)]
    ','           reduce using rule 16 (operand)
    ','           [reduce using rule 22 (expr_operand)]
    $default      reduce using rule 22 (expr_operand)


State 77

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 80


State 78

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 81


State 79

   22 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 82


State 80

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 4 (simple_statement)


State 81

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 7
    '-'       shift, and go to state 8
    '('       shift, and go to state 10

    expr             go to state 14
    operand          go to state 83
    numeric_operand  go to state 16
    logic_expr       go to state 17
    expr_operand     go to state 18


State 82

   22 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 22 (expr_operand)


State 83

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 84


State 84

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 5 (simple_statement)
