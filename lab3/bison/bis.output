Terminals unused in grammar

    VAR_TYPE
    ARRAY
    "<"
    ">"
    LEFT_ASSIGN
    RIGHT_ASSIGN


State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce
State 12 conflicts: 2 reduce/reduce
State 23 conflicts: 1 shift/reduce
State 37 conflicts: 2 shift/reduce
State 39 conflicts: 2 shift/reduce
State 40 conflicts: 4 shift/reduce
State 41 conflicts: 4 shift/reduce
State 50 conflicts: 2 reduce/reduce


Grammar

    0 $accept: complex_statement $end

    1 complex_statement: simple_statement ',' complex_statement
    2                  | simple_statement '.'

    3 simple_statement: '@' operand

    4 operand: numeric_operand
    5        | VAR_NAME
    6        | VAR_NAME '[' LITERAL LITERAL ']'

    7 numeric_operand: LITERAL
    8                | expr
    9                | logic_expr

   10 expr_operand: LITERAL
   11             | VAR_NAME
   12             | VAR_NAME '[' LITERAL LITERAL ']'

   13 expr: expr_operand
   14     | '+' expr_operand
   15     | '-' expr_operand
   16     | expr '*' expr
   17     | expr '/' expr
   18     | expr '+' expr
   19     | expr '-' expr
   20     | '(' expr ')'

   21 logic_expr: logic_expr LESS_EQUAL logic_expr
   22           | logic_expr MORE_EQUAL logic_expr
   23           | logic_expr '<' logic_expr
   24           | logic_expr '>' logic_expr
   25           | '(' logic_expr ')'
   26           | expr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 20 25
    ')' (41) 20 25
    '*' (42) 16
    '+' (43) 14 18
    ',' (44) 1
    '-' (45) 15 19
    '.' (46) 2
    '/' (47) 17
    '<' (60) 23
    '>' (62) 24
    '@' (64) 3
    '[' (91) 6 12
    ']' (93) 6 12
    error (256)
    VAR_NAME <str> (258) 5 6 11 12
    LITERAL <num> (259) 6 7 10 12
    VAR_TYPE <var_type> (260)
    ARRAY (261)
    LESS_EQUAL (262) 21
    MORE_EQUAL (263) 22
    "<" (264)
    ">" (265)
    LEFT_ASSIGN (266)
    RIGHT_ASSIGN (267)


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    complex_statement <st> (27)
        on left: 1 2
        on right: 0 1
    simple_statement <st> (28)
        on left: 3
        on right: 1 2
    operand <st> (29)
        on left: 4 5 6
        on right: 3
    numeric_operand <st> (30)
        on left: 7 8 9
        on right: 4
    logic_expr <st> (31)
        on left: 21 22 23 24 25 26
        on right: 9 21 22 23 24 25
    expr <st> (32)
        on left: 13 14 15 16 17 18 19 20
        on right: 8 16 17 18 19 20 26
    expr_operand <st> (33)
        on left: 10 11 12
        on right: 13 14 15


State 0

    0 $accept: . complex_statement $end

    '@'  shift, and go to state 1

    complex_statement  go to state 2
    simple_statement   go to state 3


State 1

    3 simple_statement: '@' . operand

    VAR_NAME  shift, and go to state 4
    LITERAL   shift, and go to state 5
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    operand          go to state 9
    numeric_operand  go to state 10
    logic_expr       go to state 11
    expr             go to state 12
    expr_operand     go to state 13


State 2

    0 $accept: complex_statement . $end

    $end  shift, and go to state 14


State 3

    1 complex_statement: simple_statement . ',' complex_statement
    2                  | simple_statement . '.'

    ','  shift, and go to state 15
    '.'  shift, and go to state 16


State 4

    5 operand: VAR_NAME .
    6        | VAR_NAME . '[' LITERAL LITERAL ']'
   11 expr_operand: VAR_NAME .
   12             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 17

    ','       reduce using rule 5 (operand)
    ','       [reduce using rule 11 (expr_operand)]
    '.'       reduce using rule 5 (operand)
    '.'       [reduce using rule 11 (expr_operand)]
    $default  reduce using rule 11 (expr_operand)


State 5

    7 numeric_operand: LITERAL .
   10 expr_operand: LITERAL .

    ','       reduce using rule 7 (numeric_operand)
    ','       [reduce using rule 10 (expr_operand)]
    '.'       reduce using rule 7 (numeric_operand)
    '.'       [reduce using rule 10 (expr_operand)]
    $default  reduce using rule 10 (expr_operand)


State 6

   14 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19

    expr_operand  go to state 20


State 7

   15 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19

    expr_operand  go to state 21


State 8

   20 expr: '(' . expr ')'
   25 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    logic_expr    go to state 22
    expr          go to state 23
    expr_operand  go to state 13


State 9

    3 simple_statement: '@' operand .

    $default  reduce using rule 3 (simple_statement)


State 10

    4 operand: numeric_operand .

    $default  reduce using rule 4 (operand)


State 11

    9 numeric_operand: logic_expr .
   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   22           | logic_expr . MORE_EQUAL logic_expr
   23           | logic_expr . '<' logic_expr
   24           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 24
    MORE_EQUAL  shift, and go to state 25
    '<'         shift, and go to state 26
    '>'         shift, and go to state 27

    $default  reduce using rule 9 (numeric_operand)


State 12

    8 numeric_operand: expr .
   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr
   26 logic_expr: expr .

    '+'  shift, and go to state 28
    '-'  shift, and go to state 29
    '*'  shift, and go to state 30
    '/'  shift, and go to state 31

    ','       reduce using rule 8 (numeric_operand)
    ','       [reduce using rule 26 (logic_expr)]
    '.'       reduce using rule 8 (numeric_operand)
    '.'       [reduce using rule 26 (logic_expr)]
    $default  reduce using rule 26 (logic_expr)


State 13

   13 expr: expr_operand .

    $default  reduce using rule 13 (expr)


State 14

    0 $accept: complex_statement $end .

    $default  accept


State 15

    1 complex_statement: simple_statement ',' . complex_statement

    '@'  shift, and go to state 1

    complex_statement  go to state 32
    simple_statement   go to state 3


State 16

    2 complex_statement: simple_statement '.' .

    $default  reduce using rule 2 (complex_statement)


State 17

    6 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   12 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 33


State 18

   11 expr_operand: VAR_NAME .
   12             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 34

    $default  reduce using rule 11 (expr_operand)


State 19

   10 expr_operand: LITERAL .

    $default  reduce using rule 10 (expr_operand)


State 20

   14 expr: '+' expr_operand .

    $default  reduce using rule 14 (expr)


State 21

   15 expr: '-' expr_operand .

    $default  reduce using rule 15 (expr)


State 22

   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   22           | logic_expr . MORE_EQUAL logic_expr
   23           | logic_expr . '<' logic_expr
   24           | logic_expr . '>' logic_expr
   25           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 24
    MORE_EQUAL  shift, and go to state 25
    ')'         shift, and go to state 35
    '<'         shift, and go to state 26
    '>'         shift, and go to state 27


State 23

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr
   20     | '(' expr . ')'
   26 logic_expr: expr .

    '+'  shift, and go to state 28
    '-'  shift, and go to state 29
    '*'  shift, and go to state 30
    '/'  shift, and go to state 31
    ')'  shift, and go to state 36

    ')'       [reduce using rule 26 (logic_expr)]
    $default  reduce using rule 26 (logic_expr)


State 24

   21 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    logic_expr    go to state 37
    expr          go to state 38
    expr_operand  go to state 13


State 25

   22 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    logic_expr    go to state 39
    expr          go to state 38
    expr_operand  go to state 13


State 26

   23 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    logic_expr    go to state 40
    expr          go to state 38
    expr_operand  go to state 13


State 27

   24 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 8

    logic_expr    go to state 41
    expr          go to state 38
    expr_operand  go to state 13


State 28

   18 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 42

    expr          go to state 43
    expr_operand  go to state 13


State 29

   19 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 42

    expr          go to state 44
    expr_operand  go to state 13


State 30

   16 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 42

    expr          go to state 45
    expr_operand  go to state 13


State 31

   17 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 42

    expr          go to state 46
    expr_operand  go to state 13


State 32

    1 complex_statement: simple_statement ',' complex_statement .

    $default  reduce using rule 1 (complex_statement)


State 33

    6 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   12 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 47


State 34

   12 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 48


State 35

   25 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 25 (logic_expr)


State 36

   20 expr: '(' expr ')' .

    $default  reduce using rule 20 (expr)


State 37

   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   21           | logic_expr LESS_EQUAL logic_expr .
   22           | logic_expr . MORE_EQUAL logic_expr
   23           | logic_expr . '<' logic_expr
   24           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 26
    '>'  shift, and go to state 27

    '<'       [reduce using rule 21 (logic_expr)]
    '>'       [reduce using rule 21 (logic_expr)]
    $default  reduce using rule 21 (logic_expr)


State 38

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr
   26 logic_expr: expr .

    '+'  shift, and go to state 28
    '-'  shift, and go to state 29
    '*'  shift, and go to state 30
    '/'  shift, and go to state 31

    $default  reduce using rule 26 (logic_expr)


State 39

   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   22           | logic_expr . MORE_EQUAL logic_expr
   22           | logic_expr MORE_EQUAL logic_expr .
   23           | logic_expr . '<' logic_expr
   24           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 26
    '>'  shift, and go to state 27

    '<'       [reduce using rule 22 (logic_expr)]
    '>'       [reduce using rule 22 (logic_expr)]
    $default  reduce using rule 22 (logic_expr)


State 40

   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   22           | logic_expr . MORE_EQUAL logic_expr
   23           | logic_expr . '<' logic_expr
   23           | logic_expr '<' logic_expr .
   24           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 24
    MORE_EQUAL  shift, and go to state 25
    '<'         shift, and go to state 26
    '>'         shift, and go to state 27

    LESS_EQUAL  [reduce using rule 23 (logic_expr)]
    MORE_EQUAL  [reduce using rule 23 (logic_expr)]
    '<'         [reduce using rule 23 (logic_expr)]
    '>'         [reduce using rule 23 (logic_expr)]
    $default    reduce using rule 23 (logic_expr)


State 41

   21 logic_expr: logic_expr . LESS_EQUAL logic_expr
   22           | logic_expr . MORE_EQUAL logic_expr
   23           | logic_expr . '<' logic_expr
   24           | logic_expr . '>' logic_expr
   24           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 24
    MORE_EQUAL  shift, and go to state 25
    '<'         shift, and go to state 26
    '>'         shift, and go to state 27

    LESS_EQUAL  [reduce using rule 24 (logic_expr)]
    MORE_EQUAL  [reduce using rule 24 (logic_expr)]
    '<'         [reduce using rule 24 (logic_expr)]
    '>'         [reduce using rule 24 (logic_expr)]
    $default    reduce using rule 24 (logic_expr)


State 42

   20 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 18
    LITERAL   shift, and go to state 19
    '+'       shift, and go to state 6
    '-'       shift, and go to state 7
    '('       shift, and go to state 42

    expr          go to state 49
    expr_operand  go to state 13


State 43

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   18     | expr '+' expr .
   19     | expr . '-' expr

    '*'  shift, and go to state 30
    '/'  shift, and go to state 31

    $default  reduce using rule 18 (expr)


State 44

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr
   19     | expr '-' expr .

    '*'  shift, and go to state 30
    '/'  shift, and go to state 31

    $default  reduce using rule 19 (expr)


State 45

   16 expr: expr . '*' expr
   16     | expr '*' expr .
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr

    $default  reduce using rule 16 (expr)


State 46

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   17     | expr '/' expr .
   18     | expr . '+' expr
   19     | expr . '-' expr

    $default  reduce using rule 17 (expr)


State 47

    6 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   12 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 50


State 48

   12 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 51


State 49

   16 expr: expr . '*' expr
   17     | expr . '/' expr
   18     | expr . '+' expr
   19     | expr . '-' expr
   20     | '(' expr . ')'

    '+'  shift, and go to state 28
    '-'  shift, and go to state 29
    '*'  shift, and go to state 30
    '/'  shift, and go to state 31
    ')'  shift, and go to state 36


State 50

    6 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   12 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    ','       reduce using rule 6 (operand)
    ','       [reduce using rule 12 (expr_operand)]
    '.'       reduce using rule 6 (operand)
    '.'       [reduce using rule 12 (expr_operand)]
    $default  reduce using rule 12 (expr_operand)


State 51

   12 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 52


State 52

   12 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 12 (expr_operand)
