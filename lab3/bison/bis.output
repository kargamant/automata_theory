Terminals unused in grammar

    UNTIL
    DO
    "<"
    ">"


State 1 conflicts: 3 reduce/reduce
State 3 conflicts: 3 reduce/reduce
State 16 conflicts: 3 reduce/reduce
State 28 conflicts: 1 shift/reduce
State 43 conflicts: 1 reduce/reduce
State 52 conflicts: 2 shift/reduce
State 54 conflicts: 2 shift/reduce
State 55 conflicts: 4 shift/reduce
State 56 conflicts: 4 shift/reduce
State 68 conflicts: 3 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: complex_statement

    2 complex_statement: simple_statement complex_statement
    3                  | simple_statement

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    5                 | ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','
    6                 | assign_expr ','
    7                 | '@' operand ','
    8                 | '.'

    9 assign_expr: operand LEFT_ASSIGN assign_expr
   10            | operand RIGHT_ASSIGN assign_expr
   11            | operand

   12 operand: numeric_operand
   13        | VAR_NAME
   14        | VAR_NAME '[' LITERAL LITERAL ']'

   15 numeric_operand: LITERAL
   16                | expr
   17                | logic_expr

   18 expr_operand: LITERAL
   19             | VAR_NAME
   20             | VAR_NAME '[' LITERAL LITERAL ']'

   21 expr: expr_operand
   22     | '+' expr_operand
   23     | '-' expr_operand
   24     | expr '*' expr
   25     | expr '/' expr
   26     | expr '+' expr
   27     | expr '-' expr
   28     | '(' expr ')'

   29 logic_expr: logic_expr LESS_EQUAL logic_expr
   30           | logic_expr MORE_EQUAL logic_expr
   31           | logic_expr '<' logic_expr
   32           | logic_expr '>' logic_expr
   33           | '(' logic_expr ')'
   34           | expr

   35 vars: VAR_NAME vars
   36     | VAR_NAME
   37     | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 28 33
    ')' (41) 28 33
    '*' (42) 24
    '+' (43) 22 26
    ',' (44) 4 5 6 7
    '-' (45) 23 27
    '.' (46) 8
    '/' (47) 25
    '<' (60) 31
    '>' (62) 32
    '@' (64) 7
    '[' (91) 14 20
    ']' (93) 14 20
    error (256)
    VAR_NAME <str> (258) 4 5 13 14 19 20 35 36
    VAR_TYPE <var_type> (259) 4 5
    LITERAL <num> (260) 14 15 18 20
    ARRAY (261) 5
    UNTIL (262)
    DO (263)
    LESS_EQUAL (264) 29
    MORE_EQUAL (265) 30
    "<" (266)
    ">" (267)
    LEFT_ASSIGN (268) 4 5 9
    RIGHT_ASSIGN (269) 10


Nonterminals, with rules where they appear

    $accept (28)
        on left: 0
    main <st> (29)
        on left: 1
        on right: 0
    complex_statement <st> (30)
        on left: 2 3
        on right: 1 2
    simple_statement <st> (31)
        on left: 4 5 6 7 8
        on right: 2 3
    operand <st> (32)
        on left: 12 13 14
        on right: 4 5 7 9 10 11
    numeric_operand <st> (33)
        on left: 15 16 17
        on right: 12
    logic_expr <st> (34)
        on left: 29 30 31 32 33 34
        on right: 17 29 30 31 32 33
    expr <st> (35)
        on left: 21 22 23 24 25 26 27 28
        on right: 16 24 25 26 27 28 34
    expr_operand <st> (36)
        on left: 18 19 20
        on right: 21 22 23
    assign_expr (37)
        on left: 9 10 11
        on right: 6 9 10
    vars (38)
        on left: 35 36 37
        on right: 4 5 35


State 0

    0 $accept: . main $end

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '@'       shift, and go to state 7
    '.'       shift, and go to state 8
    '('       shift, and go to state 9

    main               go to state 10
    complex_statement  go to state 11
    simple_statement   go to state 12
    operand            go to state 13
    numeric_operand    go to state 14
    logic_expr         go to state 15
    expr               go to state 16
    expr_operand       go to state 17
    assign_expr        go to state 18


State 1

   13 operand: VAR_NAME .
   14        | VAR_NAME . '[' LITERAL LITERAL ']'
   19 expr_operand: VAR_NAME .
   20             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 19

    LEFT_ASSIGN   reduce using rule 13 (operand)
    LEFT_ASSIGN   [reduce using rule 19 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 13 (operand)
    RIGHT_ASSIGN  [reduce using rule 19 (expr_operand)]
    ','           reduce using rule 13 (operand)
    ','           [reduce using rule 19 (expr_operand)]
    $default      reduce using rule 19 (expr_operand)


State 2

    4 simple_statement: VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 20


State 3

   15 numeric_operand: LITERAL .
   18 expr_operand: LITERAL .

    LEFT_ASSIGN   reduce using rule 15 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 18 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 15 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 18 (expr_operand)]
    ','           reduce using rule 15 (numeric_operand)
    ','           [reduce using rule 18 (expr_operand)]
    $default      reduce using rule 18 (expr_operand)


State 4

    5 simple_statement: ARRAY . VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 21


State 5

   22 expr: '+' . expr_operand

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23

    expr_operand  go to state 24


State 6

   23 expr: '-' . expr_operand

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23

    expr_operand  go to state 25


State 7

    7 simple_statement: '@' . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    operand          go to state 26
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 8

    8 simple_statement: '.' .

    $default  reduce using rule 8 (simple_statement)


State 9

   28 expr: '(' . expr ')'
   33 logic_expr: '(' . logic_expr ')'

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    logic_expr    go to state 27
    expr          go to state 28
    expr_operand  go to state 17


State 10

    0 $accept: main . $end

    $end  shift, and go to state 29


State 11

    1 main: complex_statement .

    $default  reduce using rule 1 (main)


State 12

    2 complex_statement: simple_statement . complex_statement
    3                  | simple_statement .

    VAR_NAME  shift, and go to state 1
    VAR_TYPE  shift, and go to state 2
    LITERAL   shift, and go to state 3
    ARRAY     shift, and go to state 4
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '@'       shift, and go to state 7
    '.'       shift, and go to state 8
    '('       shift, and go to state 9

    $default  reduce using rule 3 (complex_statement)

    complex_statement  go to state 30
    simple_statement   go to state 12
    operand            go to state 13
    numeric_operand    go to state 14
    logic_expr         go to state 15
    expr               go to state 16
    expr_operand       go to state 17
    assign_expr        go to state 18


State 13

    9 assign_expr: operand . LEFT_ASSIGN assign_expr
   10            | operand . RIGHT_ASSIGN assign_expr
   11            | operand .

    LEFT_ASSIGN   shift, and go to state 31
    RIGHT_ASSIGN  shift, and go to state 32

    $default  reduce using rule 11 (assign_expr)


State 14

   12 operand: numeric_operand .

    $default  reduce using rule 12 (operand)


State 15

   17 numeric_operand: logic_expr .
   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr . '<' logic_expr
   32           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 33
    MORE_EQUAL  shift, and go to state 34
    '<'         shift, and go to state 35
    '>'         shift, and go to state 36

    $default  reduce using rule 17 (numeric_operand)


State 16

   16 numeric_operand: expr .
   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   34 logic_expr: expr .

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    LEFT_ASSIGN   reduce using rule 16 (numeric_operand)
    LEFT_ASSIGN   [reduce using rule 34 (logic_expr)]
    RIGHT_ASSIGN  reduce using rule 16 (numeric_operand)
    RIGHT_ASSIGN  [reduce using rule 34 (logic_expr)]
    ','           reduce using rule 16 (numeric_operand)
    ','           [reduce using rule 34 (logic_expr)]
    $default      reduce using rule 34 (logic_expr)


State 17

   21 expr: expr_operand .

    $default  reduce using rule 21 (expr)


State 18

    6 simple_statement: assign_expr . ','

    ','  shift, and go to state 41


State 19

   14 operand: VAR_NAME '[' . LITERAL LITERAL ']'
   20 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 42


State 20

    4 simple_statement: VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 43

    $default  reduce using rule 37 (vars)

    vars  go to state 44


State 21

    5 simple_statement: ARRAY VAR_TYPE . VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_TYPE  shift, and go to state 45


State 22

   19 expr_operand: VAR_NAME .
   20             | VAR_NAME . '[' LITERAL LITERAL ']'

    '['  shift, and go to state 46

    $default  reduce using rule 19 (expr_operand)


State 23

   18 expr_operand: LITERAL .

    $default  reduce using rule 18 (expr_operand)


State 24

   22 expr: '+' expr_operand .

    $default  reduce using rule 22 (expr)


State 25

   23 expr: '-' expr_operand .

    $default  reduce using rule 23 (expr)


State 26

    7 simple_statement: '@' operand . ','

    ','  shift, and go to state 47


State 27

   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr . '<' logic_expr
   32           | logic_expr . '>' logic_expr
   33           | '(' logic_expr . ')'

    LESS_EQUAL  shift, and go to state 33
    MORE_EQUAL  shift, and go to state 34
    ')'         shift, and go to state 48
    '<'         shift, and go to state 35
    '>'         shift, and go to state 36


State 28

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | '(' expr . ')'
   34 logic_expr: expr .

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ')'  shift, and go to state 49

    ')'       [reduce using rule 34 (logic_expr)]
    $default  reduce using rule 34 (logic_expr)


State 29

    0 $accept: main $end .

    $default  accept


State 30

    2 complex_statement: simple_statement complex_statement .

    $default  reduce using rule 2 (complex_statement)


State 31

    9 assign_expr: operand LEFT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    operand          go to state 13
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17
    assign_expr      go to state 50


State 32

   10 assign_expr: operand RIGHT_ASSIGN . assign_expr

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    operand          go to state 13
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17
    assign_expr      go to state 51


State 33

   29 logic_expr: logic_expr LESS_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    logic_expr    go to state 52
    expr          go to state 53
    expr_operand  go to state 17


State 34

   30 logic_expr: logic_expr MORE_EQUAL . logic_expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    logic_expr    go to state 54
    expr          go to state 53
    expr_operand  go to state 17


State 35

   31 logic_expr: logic_expr '<' . logic_expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    logic_expr    go to state 55
    expr          go to state 53
    expr_operand  go to state 17


State 36

   32 logic_expr: logic_expr '>' . logic_expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    logic_expr    go to state 56
    expr          go to state 53
    expr_operand  go to state 17


State 37

   26 expr: expr '+' . expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 57

    expr          go to state 58
    expr_operand  go to state 17


State 38

   27 expr: expr '-' . expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 57

    expr          go to state 59
    expr_operand  go to state 17


State 39

   24 expr: expr '*' . expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 57

    expr          go to state 60
    expr_operand  go to state 17


State 40

   25 expr: expr '/' . expr

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 57

    expr          go to state 61
    expr_operand  go to state 17


State 41

    6 simple_statement: assign_expr ',' .

    $default  reduce using rule 6 (simple_statement)


State 42

   14 operand: VAR_NAME '[' LITERAL . LITERAL ']'
   20 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 62


State 43

   35 vars: VAR_NAME . vars
   36     | VAR_NAME .

    VAR_NAME  shift, and go to state 43

    LEFT_ASSIGN  reduce using rule 36 (vars)
    LEFT_ASSIGN  [reduce using rule 37 (vars)]
    $default     reduce using rule 36 (vars)

    vars  go to state 63


State 44

    4 simple_statement: VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 64


State 45

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE . VAR_NAME vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 65


State 46

   20 expr_operand: VAR_NAME '[' . LITERAL LITERAL ']'

    LITERAL  shift, and go to state 66


State 47

    7 simple_statement: '@' operand ',' .

    $default  reduce using rule 7 (simple_statement)


State 48

   33 logic_expr: '(' logic_expr ')' .

    $default  reduce using rule 33 (logic_expr)


State 49

   28 expr: '(' expr ')' .

    $default  reduce using rule 28 (expr)


State 50

    9 assign_expr: operand LEFT_ASSIGN assign_expr .

    $default  reduce using rule 9 (assign_expr)


State 51

   10 assign_expr: operand RIGHT_ASSIGN assign_expr .

    $default  reduce using rule 10 (assign_expr)


State 52

   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   29           | logic_expr LESS_EQUAL logic_expr .
   30           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr . '<' logic_expr
   32           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 35
    '>'  shift, and go to state 36

    '<'       [reduce using rule 29 (logic_expr)]
    '>'       [reduce using rule 29 (logic_expr)]
    $default  reduce using rule 29 (logic_expr)


State 53

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   34 logic_expr: expr .

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 34 (logic_expr)


State 54

   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr . MORE_EQUAL logic_expr
   30           | logic_expr MORE_EQUAL logic_expr .
   31           | logic_expr . '<' logic_expr
   32           | logic_expr . '>' logic_expr

    '<'  shift, and go to state 35
    '>'  shift, and go to state 36

    '<'       [reduce using rule 30 (logic_expr)]
    '>'       [reduce using rule 30 (logic_expr)]
    $default  reduce using rule 30 (logic_expr)


State 55

   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr . '<' logic_expr
   31           | logic_expr '<' logic_expr .
   32           | logic_expr . '>' logic_expr

    LESS_EQUAL  shift, and go to state 33
    MORE_EQUAL  shift, and go to state 34
    '<'         shift, and go to state 35
    '>'         shift, and go to state 36

    LESS_EQUAL  [reduce using rule 31 (logic_expr)]
    MORE_EQUAL  [reduce using rule 31 (logic_expr)]
    '<'         [reduce using rule 31 (logic_expr)]
    '>'         [reduce using rule 31 (logic_expr)]
    $default    reduce using rule 31 (logic_expr)


State 56

   29 logic_expr: logic_expr . LESS_EQUAL logic_expr
   30           | logic_expr . MORE_EQUAL logic_expr
   31           | logic_expr . '<' logic_expr
   32           | logic_expr . '>' logic_expr
   32           | logic_expr '>' logic_expr .

    LESS_EQUAL  shift, and go to state 33
    MORE_EQUAL  shift, and go to state 34
    '<'         shift, and go to state 35
    '>'         shift, and go to state 36

    LESS_EQUAL  [reduce using rule 32 (logic_expr)]
    MORE_EQUAL  [reduce using rule 32 (logic_expr)]
    '<'         [reduce using rule 32 (logic_expr)]
    '>'         [reduce using rule 32 (logic_expr)]
    $default    reduce using rule 32 (logic_expr)


State 57

   28 expr: '(' . expr ')'

    VAR_NAME  shift, and go to state 22
    LITERAL   shift, and go to state 23
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 57

    expr          go to state 67
    expr_operand  go to state 17


State 58

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   26     | expr '+' expr .
   27     | expr . '-' expr

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 26 (expr)


State 59

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   27     | expr '-' expr .

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 27 (expr)


State 60

   24 expr: expr . '*' expr
   24     | expr '*' expr .
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr

    $default  reduce using rule 24 (expr)


State 61

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   25     | expr '/' expr .
   26     | expr . '+' expr
   27     | expr . '-' expr

    $default  reduce using rule 25 (expr)


State 62

   14 operand: VAR_NAME '[' LITERAL LITERAL . ']'
   20 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 68


State 63

   35 vars: VAR_NAME vars .

    $default  reduce using rule 35 (vars)


State 64

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    operand          go to state 69
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 65

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME . vars LEFT_ASSIGN operand ','

    VAR_NAME  shift, and go to state 43

    $default  reduce using rule 37 (vars)

    vars  go to state 70


State 66

   20 expr_operand: VAR_NAME '[' LITERAL . LITERAL ']'

    LITERAL  shift, and go to state 71


State 67

   24 expr: expr . '*' expr
   25     | expr . '/' expr
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | '(' expr . ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ')'  shift, and go to state 49


State 68

   14 operand: VAR_NAME '[' LITERAL LITERAL ']' .
   20 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    LEFT_ASSIGN   reduce using rule 14 (operand)
    LEFT_ASSIGN   [reduce using rule 20 (expr_operand)]
    RIGHT_ASSIGN  reduce using rule 14 (operand)
    RIGHT_ASSIGN  [reduce using rule 20 (expr_operand)]
    ','           reduce using rule 14 (operand)
    ','           [reduce using rule 20 (expr_operand)]
    $default      reduce using rule 20 (expr_operand)


State 69

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 72


State 70

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars . LEFT_ASSIGN operand ','

    LEFT_ASSIGN  shift, and go to state 73


State 71

   20 expr_operand: VAR_NAME '[' LITERAL LITERAL . ']'

    ']'  shift, and go to state 74


State 72

    4 simple_statement: VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 4 (simple_statement)


State 73

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN . operand ','

    VAR_NAME  shift, and go to state 1
    LITERAL   shift, and go to state 3
    '+'       shift, and go to state 5
    '-'       shift, and go to state 6
    '('       shift, and go to state 9

    operand          go to state 75
    numeric_operand  go to state 14
    logic_expr       go to state 15
    expr             go to state 16
    expr_operand     go to state 17


State 74

   20 expr_operand: VAR_NAME '[' LITERAL LITERAL ']' .

    $default  reduce using rule 20 (expr_operand)


State 75

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand . ','

    ','  shift, and go to state 76


State 76

    5 simple_statement: ARRAY VAR_TYPE VAR_TYPE VAR_NAME vars LEFT_ASSIGN operand ',' .

    $default  reduce using rule 5 (simple_statement)
